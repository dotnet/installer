From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nikola Milosavljevic <nikolam@microsoft.com>
Date: Thu, 11 Jan 2024 21:12:12 +0000
Subject: [PATCH] Disable inner-clone in product source-build

---
 .../tools/SourceBuild/AfterSourceBuild.proj   | 46 +++++++++++-
 .../SourceBuild/SourceBuildArcade.targets     | 73 ++++++++++++++++++-
 .../SourceBuildArcadeBuild.targets            |  5 +-
 .../SourceBuild/SourceBuildIntermediate.proj  | 51 +------------
 4 files changed, 123 insertions(+), 52 deletions(-)

diff --git a/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/AfterSourceBuild.proj b/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/AfterSourceBuild.proj
index 31f544e6..2de4e955 100644
--- a/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/AfterSourceBuild.proj
+++ b/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/AfterSourceBuild.proj
@@ -15,7 +15,8 @@
           Condition="'$(ArcadeInnerBuildFromSource)' != 'true'"
           DependsOnTargets="
             ReportPrebuiltUsage;
-            PackSourceBuildIntermediateNupkgs" />
+            PackSourceBuildIntermediateNupkgs;
+            CopyRepoArtifacts" />
 
   <Target Name="WritePrebuiltUsageData">
     <ItemGroup>
@@ -117,11 +118,54 @@
       DestinationFiles="$(SourceBuildIntermediateNupkgLicenseFile)" />
   </Target>
 
+  <!-- In VMR build we copy repo artifacts directly, without using the intermediate nupkgs. -->
+  <Target Name="CopyRepoArtifacts"
+          Condition="'$(DotNetBuildFromSourceFlavor)' == 'Product'"
+          DependsOnTargets="
+            GetCategorizedIntermediateNupkgContents;
+            CreateRepoSymbolsArchive">
+
+    <PropertyGroup>
+      <_NupkgsDestination>$(CurrentSourceBuiltPackagesDir)</_NupkgsDestination>
+      <_NupkgsDestination Condition="'$(GitHubRepositoryName)' == 'source-build-reference-packages'">$(ReferencePackagesDir)</_NupkgsDestination>
+    </PropertyGroup>
+
+    <ItemGroup>
+      <_AssetsToCopy Include="@(IntermediateNupkgFile)" Condition="'%(Extension)' != '.nupkg'" />
+      <_NugetPackagesToCopy Include="@(IntermediateNupkgFile)" Condition="'%(Extension)' == '.nupkg'"/>
+    </ItemGroup>
+
+    <!-- Copy non-shipping package list -->
+    <Copy
+      Condition="'$(NonShippingPackagesList)' != ''"
+      SourceFiles="$(NonShippingPackagesList)"
+      DestinationFolder="$(PackageListsDir)" />
+
+    <!-- Building SBRP: At this point the References directory contains the previously-source-built SBRPs,
+         clear it before copying the current SBRPs.  This ensures n-1 SBRPs aren't required to build the product repos. -->
+    <RemoveDir
+      Condition="'$(GitHubRepositoryName)' == 'source-build-reference-packages'"
+      Directories="$(ReferencePackagesDir)" />
+
+    <!-- Copy nupkgs -->
+    <Copy
+      Condition="'@(_NugetPackagesToCopy)' != ''"
+      SourceFiles="@(_NugetPackagesToCopy)"
+      DestinationFolder="$(_NupkgsDestination)" />
+
+    <!-- Copy assets -->
+    <Copy
+      Condition="'@(_AssetsToCopy)' != ''"
+      SourceFiles="@(_AssetsToCopy)"
+      DestinationFolder="$(SourceBuiltAssetsDir)" />
+  </Target>
+
   <!--
     Create source-build intermediate NuGet package and supplemental intermediate NuGet packages (if
     necessary) for dependency transport to downstream repos.
   -->
   <Target Name="PackSourceBuildIntermediateNupkgs"
+          Condition="'$(CreateIntermediatePackage)' == 'true'"
           DependsOnTargets="
             CopyIntermediateNupkgProjToProjectDirectory;
             GetLicenseFileForIntermediateNupkgPack;
diff --git a/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildArcade.targets b/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildArcade.targets
index 2d1a20d5..4ccb159a 100644
--- a/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildArcade.targets
+++ b/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildArcade.targets
@@ -24,12 +24,24 @@
     <CurrentRepoSourceBuildPackageCache>$([MSBuild]::NormalizeDirectory('$(SourceBuildOutputDir)', 'package-cache'))</CurrentRepoSourceBuildPackageCache>
     <SourceBuildSelfPrebuiltReportDir>$([MSBuild]::NormalizeDirectory('$(SourceBuildOutputDir)', 'prebuilt-report'))</SourceBuildSelfPrebuiltReportDir>
 
+    <!--
+      Do not use inner-clone in full product source-build, unless explicitly requested,
+      i.e. for specific repos, like source-build-externals.
+    -->
+    <UseInnerClone Condition="'$(UseInnerClone)' == '' and '$(DotNetBuildFromSourceFlavor)' != 'Product'">true</UseInnerClone>
+
+    <!-- Do not create intermediate package in full product source-build. -->
+    <CreateIntermediatePackage Condition="'$(DotNetBuildFromSourceFlavor)' != 'Product'">true</CreateIntermediatePackage>
+
     <!--
       Keep artifacts/ inside source dir so that ancestor-based file lookups find the inner repo, not
       the outer repo. The inner repo global.json and NuGet.config files may have been modified by
       source-build, and we want projects inside the artifacts/ dir to respect that.
+
+      Inner-clone removal - in VMR use regular artifacts dir.
     -->
     <CurrentRepoSourceBuildArtifactsDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildSourceDir)', 'artifacts'))</CurrentRepoSourceBuildArtifactsDir>
+    <CurrentRepoSourceBuildArtifactsDir Condition="'$(UseInnerClone)' != 'true'">$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)'))</CurrentRepoSourceBuildArtifactsDir>
     <CurrentRepoSourceBuildArtifactsPackagesDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsDir)', 'packages', '$(Configuration)'))</CurrentRepoSourceBuildArtifactsPackagesDir>
 
     <CurrentRepoSourceBuildNuGetSourceName>source-build-int-nupkg-cache</CurrentRepoSourceBuildNuGetSourceName>
@@ -106,8 +118,8 @@
     <ItemGroup>
       <IntermediateNupkgFile Include="@(IntermediateNupkgArtifactFile)" PackagePath="artifacts" />
 
-      <!-- Report goes into the 'main' intermediate nupkg. -->
-      <IntermediateNupkgFile Include="$(SourceBuildSelfPrebuiltReportDir)**\*" PackagePath="prebuilt-report" />
+      <!-- Report goes into the 'main' intermediate nupkg, if we're creating it. -->
+      <IntermediateNupkgFile Condition="'$(CreateIntermediatePackage)' == 'true'" Include="$(SourceBuildSelfPrebuiltReportDir)**\*" PackagePath="prebuilt-report" />
     </ItemGroup>
 
     <RemoveDuplicates Inputs="@(IntermediateNupkgFile)">
@@ -118,6 +130,63 @@
       <IntermediateNonShippingNupkgFile Include="@(IntermediatePackageFile)" Condition="$([System.Text.RegularExpressions.Regex]::Match(%(Identity),'[\\\\/]NonShipping[\\\\/]').Success)"/>
       <SupplementalIntermediateNupkgCategory Include="%(IntermediatePackageFile.Category)" />
     </ItemGroup>
+
+    <PropertyGroup>
+      <!-- The prefix needs to match what's defined in tarball source-build infra. Consider using a single property, in the future. -->
+      <NonShippingPackagesListPrefix>NonShipping.Packages.</NonShippingPackagesListPrefix>
+      <NonShippingPackagesList Condition="'@(IntermediateNonShippingNupkgFile)' != ''">$(CurrentRepoSourceBuildArtifactsPackagesDir)$(NonShippingPackagesListPrefix)$(GitHubRepositoryName).lst</NonShippingPackagesList>
+    </PropertyGroup>
+
+    <WriteLinesToFile
+      Condition="'$(NonShippingPackagesList)' != ''"
+      File="$(NonShippingPackagesList)"
+      Lines="@(IntermediateNonShippingNupkgFile->'%(Filename)%(Extension)')"
+      Overwrite="true" />
+
+  </Target>
+
+  <!--
+    Create symbols archive.
+
+    Conditioning out for Windows as the tar execution below doesn't work cross-plat.
+  -->
+  <Target Name="CreateRepoSymbolsArchive" Condition="'$(OS)' != 'Windows_NT'">
+    <PropertyGroup>
+      <SymbolsRoot>$(CurrentRepoSourceBuildArtifactsDir)</SymbolsRoot>
+      <!-- Fall back to repo root for source-build-externals or repos that don't have the regular SymbolsRoot as defined above -->
+      <SymbolsRoot Condition="!Exists('$(SymbolsRoot)') or '$(GitHubRepositoryName)' == 'source-build-externals'">$(RepoRoot)</SymbolsRoot>
+      <SymbolsArchiveLocation>$(CurrentRepoSourceBuildArtifactsPackagesDir)</SymbolsArchiveLocation>
+      <SymbolsArchiveLocation Condition="'$(GitHubRepositoryName)' == 'nuget-client'">$(PackageOutputPath)</SymbolsArchiveLocation>
+      <!--
+        If we're doing full product source-build, we do not have intermediate package to carry this archive.
+        Instead, we create it in blob-feed assets folder, directly.
+      -->
+      <SymbolsArchiveLocation Condition="'$(DotNetBuildFromSourceFlavor)' == 'Product'">$(SourceBuiltAssetsDir)</SymbolsArchiveLocation>
+      <SymbolsList>$(SymbolsArchiveLocation)\symbols.lst</SymbolsList>
+      <SymbolsArchivePrefix>Symbols.</SymbolsArchivePrefix>
+      <!-- $(Version) and $(TargetRid) are only available when target is executed as part of intermediate package creation. -->
+      <SymbolsArchiveSuffix Condition="'$(CreateIntermediatePackage)' == 'true'">.$(Version).$(TargetRid)</SymbolsArchiveSuffix>
+      <SymbolsArchiveName>$(SymbolsArchiveLocation)$(SymbolsArchivePrefix)$(GitHubRepositoryName)$(SymbolsArchiveSuffix)$(ArchiveExtension)</SymbolsArchiveName>
+    </PropertyGroup>
+
+    <ItemGroup>
+      <AbsoluteSymbolPath Include="$(SymbolsRoot)\**\obj\**\*.pdb" />
+      <AbsoluteSymbolPath Update="@(AbsoluteSymbolPath)" Condition="'@(AbsoluteSymbolPath)' != ''">
+        <RelativePath>$([MSBuild]::MakeRelative($(SymbolsRoot), %(FullPath)))</RelativePath>
+      </AbsoluteSymbolPath>
+    </ItemGroup>
+
+    <WriteLinesToFile
+      File="$(SymbolsList)"
+      Lines="@(AbsoluteSymbolPath->'%(RelativePath)')"
+      Overwrite="true"
+      Condition="'@(AbsoluteSymbolPath)' != ''" />
+
+    <Exec Command="tar --numeric-owner -czf $(SymbolsArchiveName) --files-from=$(SymbolsList)"
+          WorkingDirectory="$(SymbolsRoot)" Condition="Exists($(SymbolsList))" />
+    <Message Importance="High" Text="Packaged symbols to $(SymbolsArchiveName)" Condition="Exists($(SymbolsArchiveName))" />
+
+    <Delete Files="$(SymbolsList)" Condition="Exists($(SymbolsList))" />
   </Target>
 
 </Project>
diff --git a/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildArcadeBuild.targets b/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildArcadeBuild.targets
index 177a5267..18ab693c 100644
--- a/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildArcadeBuild.targets
+++ b/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildArcadeBuild.targets
@@ -11,6 +11,7 @@
     <CurrentRepoSourceBuildBinlogFile>$([MSBuild]::NormalizePath('$(CurrentRepoSourceBuildArtifactsDir)', 'sourcebuild.binlog'))</CurrentRepoSourceBuildBinlogFile>
 
     <InnerSourceBuildRepoRoot Condition="'$(InnerSourceBuildRepoRoot)' == ''">$(CurrentRepoSourceBuildSourceDir)</InnerSourceBuildRepoRoot>
+    <InnerSourceBuildRepoRoot Condition="'$(UseInnerClone)' != 'true'">$(RepoRoot)</InnerSourceBuildRepoRoot>
 
     <CleanInnerSourceBuildRepoRoot Condition="'$(CleanInnerSourceBuildRepoRoot)' == ''">true</CleanInnerSourceBuildRepoRoot>
 
@@ -112,7 +113,7 @@
           DependsOnTargets="CopyInnerSourceBuildRepoRoot;CloneInnerSourceBuildRepoRoot">
   </Target>
 
-  <Target Name="CopyInnerSourceBuildRepoRoot" Condition=" '$(CopySrcInsteadOfClone)' == 'true' ">
+  <Target Name="CopyInnerSourceBuildRepoRoot" Condition=" '$(CopySrcInsteadOfClone)' == 'true' and '$(UseInnerClone)' == 'true' ">
     <ItemGroup>
       <SourceBuildFilesToCopy Include="$(RepoRoot)/**/*" />
       <SourceBuildFilesToCopy Include="$(RepoRoot)/**/.*" />
@@ -132,7 +133,7 @@
     access to the git data, this also makes it easy to see what changes the source-build infra has
     made, for diagnosis or exploratory purposes.
   -->
-  <Target Name="CloneInnerSourceBuildRepoRoot" Condition=" '$(CopySrcInsteadOfClone)' != 'true'">
+  <Target Name="CloneInnerSourceBuildRepoRoot" Condition=" '$(CopySrcInsteadOfClone)' != 'true' and '$(UseInnerClone)' == 'true' ">
     <PropertyGroup>
       <!--
         By default, copy WIP. WIP copy helps with local machine dev work. Don't copy WIP if this is
diff --git a/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildIntermediate.proj b/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildIntermediate.proj
index 5b20e23c..1abb1dd2 100644
--- a/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildIntermediate.proj
+++ b/src/Microsoft.DotNet.Arcade.Sdk/tools/SourceBuild/SourceBuildIntermediate.proj
@@ -53,6 +53,7 @@
   <Target Name="GetIntermediateNupkgArtifactFiles"
           DependsOnTargets="
             GetCategorizedIntermediateNupkgContents;
+            CreateRepoSymbolsArchive;
             GetSupplementalIntermediateNupkgManifest;
             GetSymbolsArchive;
             GetNonShippingNupkgList"
@@ -81,66 +82,22 @@
   </Target>
 
   <!--
-    Create symbols archive and include it in the main intermediate nupkg, by default.
+    Include symbols archive in the main intermediate nupkg, by default.
 
     Repos can select a different intermediate nupkg by defining 'SymbolsIntermediateNupkgCategory'
     property in eng/SourceBuild.props.
-
-    Conditioning out for Windows as the tar execution below doesn't work cross-plat.
   -->
   <Target Name="GetSymbolsArchive"
-    Condition="'$(SupplementalIntermediateNupkgCategory)' == '$(SymbolsIntermediateNupkgCategory)' and
-               '$(OS)' != 'Windows_NT'">
-    <PropertyGroup>
-      <SymbolsRoot>$(CurrentRepoSourceBuildArtifactsDir)</SymbolsRoot>
-      <!-- Fall back to repo root for source-build-externals or repos that don't have the regular SymbolsRoot as defined above -->
-      <SymbolsRoot Condition="!Exists('$(SymbolsRoot)') or '$(GitHubRepositoryName)' == 'source-build-externals'">$(RepoRoot)</SymbolsRoot>
-      <SymbolsArchiveLocation>$(CurrentRepoSourceBuildArtifactsPackagesDir)</SymbolsArchiveLocation>
-      <SymbolsArchiveLocation Condition="'$(GitHubRepositoryName)' == 'nuget-client'">$(PackageOutputPath)</SymbolsArchiveLocation>
-      <SymbolsList>$(SymbolsArchiveLocation)\symbols.lst</SymbolsList>
-      <SymbolsArchivePrefix>Symbols.</SymbolsArchivePrefix>
-      <SymbolsArchiveSuffix>.$(Version).$(TargetRid)</SymbolsArchiveSuffix>
-      <SymbolsArchiveName>$(SymbolsArchiveLocation)$(SymbolsArchivePrefix)$(GitHubRepositoryName)$(SymbolsArchiveSuffix)$(ArchiveExtension)</SymbolsArchiveName>
-    </PropertyGroup>
-
-    <ItemGroup>
-      <AbsoluteSymbolPath Include="$(SymbolsRoot)\**\obj\**\*.pdb" />
-      <AbsoluteSymbolPath Update="@(AbsoluteSymbolPath)" Condition="'@(AbsoluteSymbolPath)' != ''">
-        <RelativePath>$([MSBuild]::MakeRelative($(SymbolsRoot), %(FullPath)))</RelativePath>
-      </AbsoluteSymbolPath>
-    </ItemGroup>
-
-    <WriteLinesToFile
-      File="$(SymbolsList)"
-      Lines="@(AbsoluteSymbolPath->'%(RelativePath)')"
-      Overwrite="true"
-      Condition="'@(AbsoluteSymbolPath)' != ''" />
-
-    <Exec Command="tar --numeric-owner -czf $(SymbolsArchiveName) --files-from=$(SymbolsList)"
-          WorkingDirectory="$(SymbolsRoot)" Condition="Exists($(SymbolsList))" />
-    <Message Importance="High" Text="Packaged symbols to $(SymbolsArchiveName)" Condition="Exists($(SymbolsArchiveName))" />
+    Condition="'$(SupplementalIntermediateNupkgCategory)' == '$(SymbolsIntermediateNupkgCategory)' and '$(SymbolsArchiveName)' != ''">
 
     <ItemGroup Condition="Exists($(SymbolsArchiveName))">
       <Content Include="$(SymbolsArchiveName)" PackagePath="artifacts" />
     </ItemGroup>
-
-    <Delete Files="$(SymbolsList)" Condition="Exists($(SymbolsList))" />
   </Target>
 
   <!-- Create a list of non-shipping packages and include it in the intermediate package. -->
   <Target Name="GetNonShippingNupkgList"
-          Condition="'@(IntermediateNonShippingNupkgFile)' != ''">
-    <PropertyGroup>
-      <!-- The prefix needs to match what's defined in tarball source-build infra. Consider using a single property, in the future. -->
-      <NonShippingPackagesListPrefix>NonShipping.Packages.</NonShippingPackagesListPrefix>
-      <NonShippingPackagesList>$(CurrentRepoSourceBuildArtifactsPackagesDir)$(NonShippingPackagesListPrefix)$(GitHubRepositoryName).lst</NonShippingPackagesList>
-    </PropertyGroup>
-
-    <WriteLinesToFile
-      File="$(NonShippingPackagesList)"
-      Lines="@(IntermediateNonShippingNupkgFile->'%(Filename)%(Extension)')"
-      Overwrite="true" />
-
+          Condition="'$(NonShippingPackagesList)' != ''">
     <ItemGroup>
       <!-- The list of non-shipping packages goes into the "main" intermediate nupkg. -->
       <Content Include="$(NonShippingPackagesList)" PackagePath="." />
