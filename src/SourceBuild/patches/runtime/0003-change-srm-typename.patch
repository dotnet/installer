From 7745b5ec3db34cd358b26710c0ec32db8b0b23f7 Mon Sep 17 00:00:00 2001
From: Jan Kotas <jkotas@microsoft.com>
Date: Mon, 29 Apr 2024 00:13:07 -0700
Subject: [PATCH] Change S.R.M.TypeName to be consumed from
 System.Reflection.Metadata package (#101666)

---
 eng/Version.Details.xml                       | 36 ++++-----
 eng/Versions.props                            | 14 ++--
 .../CustomAttributeTypeNameParser.cs          |  4 +-
 .../ILVerification/ILVerification.projitems   | 24 ------
 src/coreclr/tools/ILVerify/ILVerify.csproj    |  1 +
 .../Dataflow/TypeNameParser.Dataflow.cs       |  4 +-
 .../ILCompiler.TypeSystem.csproj              | 31 +-------
 .../Reflection/Metadata/AssemblyNameInfo.cs   | 10 +--
 .../System/Reflection/Metadata/TypeName.cs    |  6 +-
 .../Reflection/Metadata/TypeNameParser.cs     |  9 ++-
 .../Metadata/TypeNameParserHelpers.cs         | 73 +++++++++++--------
 .../Metadata/TypeNameParserOptions.cs         | 16 +---
 .../Reflection/TypeNameParser.Helpers.cs      | 22 ++++++
 .../System.Private.CoreLib.Shared.projitems   | 11 +--
 14 files changed, 118 insertions(+), 143 deletions(-)

diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 3473e1d653c..6055b495f30 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -282,43 +282,43 @@
       <Uri>https://github.com/dotnet/llvm-project</Uri>
       <Sha>26f8c30340764cfa7fa9090dc01a36c222bf09c1</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.NETCore.App.Runtime.win-x64" Version="9.0.0-preview.4.24215.1">
+    <Dependency Name="Microsoft.NETCore.App.Runtime.win-x64" Version="9.0.0-preview.4.24227.6">
       <Uri>https://github.com/dotnet/runtime</Uri>
-      <Sha>85fbd98765c47a867564fff6ae18cc92423cdc66</Sha>
+      <Sha>b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c</Sha>
     </Dependency>
-    <Dependency Name="runtime.native.System.IO.Ports" Version="9.0.0-preview.4.24215.1">
+    <Dependency Name="runtime.native.System.IO.Ports" Version="9.0.0-preview.4.24227.6">
       <Uri>https://github.com/dotnet/runtime</Uri>
-      <Sha>85fbd98765c47a867564fff6ae18cc92423cdc66</Sha>
+      <Sha>b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.NETCore.ILAsm" Version="9.0.0-preview.4.24215.1">
+    <Dependency Name="Microsoft.NETCore.ILAsm" Version="9.0.0-preview.4.24227.6">
       <Uri>https://github.com/dotnet/runtime</Uri>
-      <Sha>85fbd98765c47a867564fff6ae18cc92423cdc66</Sha>
+      <Sha>b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.NET.Sdk.IL" Version="9.0.0-preview.4.24215.1">
+    <Dependency Name="Microsoft.NET.Sdk.IL" Version="9.0.0-preview.4.24227.6">
       <Uri>https://github.com/dotnet/runtime</Uri>
-      <Sha>85fbd98765c47a867564fff6ae18cc92423cdc66</Sha>
+      <Sha>b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c</Sha>
     </Dependency>
-    <Dependency Name="System.Text.Json" Version="9.0.0-preview.4.24215.1">
+    <Dependency Name="System.Text.Json" Version="9.0.0-preview.4.24227.6">
       <Uri>https://github.com/dotnet/runtime</Uri>
-      <Sha>85fbd98765c47a867564fff6ae18cc92423cdc66</Sha>
+      <Sha>b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c</Sha>
     </Dependency>
     <!-- Intermediate is necessary for source build. -->
-    <Dependency Name="Microsoft.SourceBuild.Intermediate.runtime.linux-x64" Version="9.0.0-preview.4.24215.1">
+    <Dependency Name="Microsoft.SourceBuild.Intermediate.runtime.linux-x64" Version="9.0.0-preview.4.24227.6">
       <Uri>https://github.com/dotnet/runtime</Uri>
-      <Sha>85fbd98765c47a867564fff6ae18cc92423cdc66</Sha>
+      <Sha>b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c</Sha>
       <SourceBuild RepoName="runtime" ManagedOnly="false" />
     </Dependency>
-    <Dependency Name="Microsoft.DotNet.ILCompiler" Version="9.0.0-preview.4.24215.1">
+    <Dependency Name="Microsoft.DotNet.ILCompiler" Version="9.0.0-preview.4.24227.6">
       <Uri>https://github.com/dotnet/runtime</Uri>
-      <Sha>85fbd98765c47a867564fff6ae18cc92423cdc66</Sha>
+      <Sha>b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c</Sha>
     </Dependency>
-    <Dependency Name="System.Reflection.Metadata" Version="9.0.0-preview.4.24215.1">
+    <Dependency Name="System.Reflection.Metadata" Version="9.0.0-preview.4.24227.6">
       <Uri>https://github.com/dotnet/runtime</Uri>
-      <Sha>85fbd98765c47a867564fff6ae18cc92423cdc66</Sha>
+      <Sha>b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c</Sha>
     </Dependency>
-    <Dependency Name="System.Reflection.MetadataLoadContext" Version="9.0.0-preview.4.24215.1">
+    <Dependency Name="System.Reflection.MetadataLoadContext" Version="9.0.0-preview.4.24227.6">
       <Uri>https://github.com/dotnet/runtime</Uri>
-      <Sha>85fbd98765c47a867564fff6ae18cc92423cdc66</Sha>
+      <Sha>b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c</Sha>
     </Dependency>
     <Dependency Name="Microsoft.DotNet.XHarness.TestRunners.Common" Version="9.0.0-prerelease.24208.1">
       <Uri>https://github.com/dotnet/xharness</Uri>
diff --git a/eng/Versions.props b/eng/Versions.props
index 5e732a3a2e1..d2fc3abbcfb 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -104,10 +104,10 @@
     <!-- NuGet dependencies -->
     <NuGetBuildTasksPackVersion>6.0.0-preview.1.102</NuGetBuildTasksPackVersion>
     <!-- Installer dependencies -->
-    <MicrosoftNETCoreAppRuntimewinx64Version>9.0.0-preview.4.24215.1</MicrosoftNETCoreAppRuntimewinx64Version>
+    <MicrosoftNETCoreAppRuntimewinx64Version>9.0.0-preview.4.24227.6</MicrosoftNETCoreAppRuntimewinx64Version>
     <MicrosoftExtensionsDependencyModelVersion>6.0.0</MicrosoftExtensionsDependencyModelVersion>
     <!-- ILAsm dependencies -->
-    <MicrosoftNETCoreILAsmVersion>9.0.0-preview.4.24215.1</MicrosoftNETCoreILAsmVersion>
+    <MicrosoftNETCoreILAsmVersion>9.0.0-preview.4.24227.6</MicrosoftNETCoreILAsmVersion>
     <!-- Libraries dependencies -->
     <MicrosoftBclAsyncInterfacesVersion>6.0.0</MicrosoftBclAsyncInterfacesVersion>
     <MicrosoftBclHashCodeVersion>1.1.1</MicrosoftBclHashCodeVersion>
@@ -119,19 +119,19 @@
     <SystemDrawingCommonVersion>8.0.0</SystemDrawingCommonVersion>
     <SystemIOFileSystemAccessControlVersion>5.0.0</SystemIOFileSystemAccessControlVersion>
     <SystemMemoryVersion>4.5.5</SystemMemoryVersion>
-    <SystemReflectionMetadataVersion>9.0.0-preview.4.24215.1</SystemReflectionMetadataVersion>
-    <SystemReflectionMetadataLoadContextVersion>9.0.0-preview.4.24215.1</SystemReflectionMetadataLoadContextVersion>
+    <SystemReflectionMetadataVersion>9.0.0-preview.4.24227.6</SystemReflectionMetadataVersion>
+    <SystemReflectionMetadataLoadContextVersion>9.0.0-preview.4.24227.6</SystemReflectionMetadataLoadContextVersion>
     <SystemSecurityAccessControlVersion>6.0.0</SystemSecurityAccessControlVersion>
     <SystemSecurityCryptographyCngVersion>5.0.0</SystemSecurityCryptographyCngVersion>
     <SystemSecurityCryptographyOpenSslVersion>5.0.0</SystemSecurityCryptographyOpenSslVersion>
     <SystemSecurityPrincipalWindowsVersion>5.0.0</SystemSecurityPrincipalWindowsVersion>
     <SystemSecurityPermissionsVersion>7.0.0</SystemSecurityPermissionsVersion>
-    <SystemTextJsonVersion>9.0.0-preview.4.24215.1</SystemTextJsonVersion>
+    <SystemTextJsonVersion>9.0.0-preview.4.24227.6</SystemTextJsonVersion>
     <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
     <SystemThreadingAccessControlVersion>7.0.0</SystemThreadingAccessControlVersion>
     <SystemThreadingTasksExtensionsVersion>4.5.4</SystemThreadingTasksExtensionsVersion>
     <SystemValueTupleVersion>4.5.0</SystemValueTupleVersion>
-    <runtimenativeSystemIOPortsVersion>9.0.0-preview.4.24215.1</runtimenativeSystemIOPortsVersion>
+    <runtimenativeSystemIOPortsVersion>9.0.0-preview.4.24227.6</runtimenativeSystemIOPortsVersion>
     <!-- Keep toolset versions in sync with dotnet/msbuild and dotnet/sdk -->
     <SystemCollectionsImmutableToolsetVersion>8.0.0</SystemCollectionsImmutableToolsetVersion>
     <SystemTextJsonToolsetVersion>8.0.0</SystemTextJsonToolsetVersion>
@@ -210,7 +210,7 @@
     <!-- Mono Cecil -->
     <MicrosoftDotNetCecilVersion>0.11.4-alpha.24215.1</MicrosoftDotNetCecilVersion>
     <!-- ILCompiler -->
-    <MicrosoftDotNetILCompilerVersion>9.0.0-preview.4.24215.1</MicrosoftDotNetILCompilerVersion>
+    <MicrosoftDotNetILCompilerVersion>9.0.0-preview.4.24227.6</MicrosoftDotNetILCompilerVersion>
     <!-- ICU -->
     <MicrosoftNETCoreRuntimeICUTransportVersion>9.0.0-preview.4.24215.1</MicrosoftNETCoreRuntimeICUTransportVersion>
     <!-- MsQuic -->
diff --git a/src/coreclr/tools/Common/TypeSystem/Common/Utilities/CustomAttributeTypeNameParser.cs b/src/coreclr/tools/Common/TypeSystem/Common/Utilities/CustomAttributeTypeNameParser.cs
index 72779375f469..33a86023ced2 100644
--- a/src/coreclr/tools/Common/TypeSystem/Common/Utilities/CustomAttributeTypeNameParser.cs
+++ b/src/coreclr/tools/Common/TypeSystem/Common/Utilities/CustomAttributeTypeNameParser.cs
@@ -29,6 +29,8 @@ namespace System.Reflection
 {
     internal partial struct TypeNameParser
     {
+        private static readonly TypeNameParseOptions s_typeNameParseOptions = new() { MaxNodes = int.MaxValue };
+
         private ModuleDesc _module;
         private bool _throwIfNotFound;
         private Func<ModuleDesc, string, MetadataType> _canonResolver;
@@ -36,7 +38,7 @@ internal partial struct TypeNameParser
         public static TypeDesc ResolveType(ModuleDesc module, string name, bool throwIfNotFound,
             Func<ModuleDesc, string, MetadataType> canonResolver)
         {
-            if (!TypeName.TryParse(name.AsSpan(), out TypeName parsed))
+            if (!TypeName.TryParse(name.AsSpan(), out TypeName parsed, s_typeNameParseOptions))
             {
                 ThrowHelper.ThrowTypeLoadException(name, module);
             }
diff --git a/src/coreclr/tools/ILVerification/ILVerification.projitems b/src/coreclr/tools/ILVerification/ILVerification.projitems
index 3b2c30ddef1f..c0f3644b1ab3 100644
--- a/src/coreclr/tools/ILVerification/ILVerification.projitems
+++ b/src/coreclr/tools/ILVerification/ILVerification.projitems
@@ -66,30 +66,6 @@
     <Compile Include="$(ToolsCommonPath)TypeSystem\Common\Utilities\CustomAttributeTypeNameParser.cs">
       <Link>Utilities\CustomAttributeTypeNameParser.cs</Link>
     </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\HexConverter.cs">
-      <Link>Utilities\HexConverter.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\AssemblyNameFormatter.cs">
-      <Link>Utilities\AssemblyNameFormatter.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\AssemblyNameParser.cs">
-      <Link>Utilities\AssemblyNameParser.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\AssemblyNameInfo.cs">
-      <Link>Utilities\Metadata\AssemblyNameInfo.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\TypeName.cs">
-      <Link>Utilities\TypeName.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\TypeNameParserOptions.cs">
-      <Link>Utilities\TypeNameParserOptions.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\TypeNameParser.cs">
-      <Link>Utilities\TypeNameParser.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\TypeNameParserHelpers.cs">
-      <Link>Utilities\TypeNameParserHelpers.cs</Link>
-    </Compile>
     <Compile Include="$(CoreLibSharedDir)System\Diagnostics\CodeAnalysis\UnconditionalSuppressMessageAttribute.cs" Condition="'$(TargetFrameworkIdentifier)' != '.NETCoreApp'">
       <Link>System\Diagnostics\CodeAnalysis\UnconditionalSuppressMessageAttribute.cs</Link>
     </Compile>
diff --git a/src/coreclr/tools/ILVerify/ILVerify.csproj b/src/coreclr/tools/ILVerify/ILVerify.csproj
index e1915c65d6f2..804f32ddc7bc 100644
--- a/src/coreclr/tools/ILVerify/ILVerify.csproj
+++ b/src/coreclr/tools/ILVerify/ILVerify.csproj
@@ -17,6 +17,7 @@
   </ItemGroup>
 
   <ItemGroup>
+    <PackageReference Include="System.Reflection.Metadata" Version="$(SystemReflectionMetadataVersion)" />
     <PackageReference Include="System.CommandLine" Version="$(SystemCommandLineVersion)" />
   </ItemGroup>
 </Project>
diff --git a/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/Dataflow/TypeNameParser.Dataflow.cs b/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/Dataflow/TypeNameParser.Dataflow.cs
index 5b0cfdb12b44..278b6c4735af 100644
--- a/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/Dataflow/TypeNameParser.Dataflow.cs
+++ b/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/Dataflow/TypeNameParser.Dataflow.cs
@@ -9,6 +9,8 @@ namespace System.Reflection
 {
     internal partial struct TypeNameParser
     {
+        private static readonly TypeNameParseOptions s_typeNameParseOptions = new() { MaxNodes = int.MaxValue };
+
         private TypeSystemContext _context;
         private ModuleDesc _callingModule;
         private List<ModuleDesc> _referencedModules;
@@ -17,7 +19,7 @@ internal partial struct TypeNameParser
         public static TypeDesc ResolveType(string name, ModuleDesc callingModule,
             TypeSystemContext context, List<ModuleDesc> referencedModules, out bool typeWasNotFoundInAssemblyNorBaseLibrary)
         {
-            if (!TypeName.TryParse(name, out TypeName parsed))
+            if (!TypeName.TryParse(name, out TypeName parsed, s_typeNameParseOptions))
             {
                 typeWasNotFoundInAssemblyNorBaseLibrary = false;
                 return null;
diff --git a/src/coreclr/tools/aot/ILCompiler.TypeSystem/ILCompiler.TypeSystem.csproj b/src/coreclr/tools/aot/ILCompiler.TypeSystem/ILCompiler.TypeSystem.csproj
index 23afa3780b1a..1a5db3b44445 100644
--- a/src/coreclr/tools/aot/ILCompiler.TypeSystem/ILCompiler.TypeSystem.csproj
+++ b/src/coreclr/tools/aot/ILCompiler.TypeSystem/ILCompiler.TypeSystem.csproj
@@ -198,39 +198,12 @@
     <Compile Include="..\..\Common\TypeSystem\Common\Utilities\CustomAttributeTypeNameParser.cs">
       <Link>Utilities\CustomAttributeTypeNameParser.cs</Link>
     </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\HexConverter.cs">
-      <Link>Utilities\HexConverter.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\AssemblyNameFormatter.cs">
-      <Link>Utilities\AssemblyNameFormatter.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\AssemblyNameParser.cs">
-      <Link>Utilities\AssemblyNameParser.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\AssemblyNameInfo.cs">
-      <Link>Utilities\AssemblyNameInfo.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\TypeName.cs">
-      <Link>Utilities\TypeName.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\TypeNameParser.cs">
-      <Link>Utilities\TypeNameParser.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\TypeNameParserHelpers.cs">
-      <Link>Utilities\TypeNameParserHelpers.cs</Link>
-    </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\Metadata\TypeNameParserOptions.cs">
-      <Link>Utilities\TypeNameParserOptions.cs</Link>
-    </Compile>
     <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Reflection\TypeNameParser.Helpers.cs">
       <Link>Utilities\CustomAttributeTypeNameParser.Helpers</Link>
     </Compile>
     <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Text\ValueStringBuilder.cs">
       <Link>Utilities\ValueStringBuilder.cs</Link>
     </Compile>
-    <Compile Include="$(LibrariesProjectRoot)\Common\src\System\Text\ValueStringBuilder.AppendSpanFormattable.cs">
-      <Link>Utilities\ValueStringBuilder.AppendSpanFormattable.cs</Link>
-    </Compile>
     <Compile Include="..\..\Common\TypeSystem\Common\Utilities\GCPointerMap.Algorithm.cs">
       <Link>Utilities\GCPointerMap.Algorithm.cs</Link>
     </Compile>
@@ -741,6 +714,10 @@
     <AdditionalFiles Include="BannedSymbols.txt" />
   </ItemGroup>
 
+  <ItemGroup>
+    <PackageReference Include="System.Reflection.Metadata" Version="$(SystemReflectionMetadataVersion)" />
+  </ItemGroup>
+
   <ItemGroup>
     <PackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="$(MicrosoftCodeAnalysisBannedApiAnalyzersVersion)" Condition="'$(DotNetBuildSourceOnly)' != 'true'">
       <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
diff --git a/src/libraries/Common/src/System/Reflection/Metadata/AssemblyNameInfo.cs b/src/libraries/Common/src/System/Reflection/Metadata/AssemblyNameInfo.cs
index ee586e3b57a8..cb4de9467f66 100644
--- a/src/libraries/Common/src/System/Reflection/Metadata/AssemblyNameInfo.cs
+++ b/src/libraries/Common/src/System/Reflection/Metadata/AssemblyNameInfo.cs
@@ -21,10 +21,10 @@ namespace System.Reflection.Metadata
     /// It's a more lightweight, immutable version of <seealso cref="AssemblyName"/> that does not pre-allocate <seealso cref="System.Globalization.CultureInfo"/> instances.
     /// </remarks>
     [DebuggerDisplay("{FullName}")]
-#if SYSTEM_PRIVATE_CORELIB
-    internal
-#else
+#if SYSTEM_REFLECTION_METADATA
     public
+#else
+    internal
 #endif
     sealed class AssemblyNameInfo
     {
@@ -182,11 +182,7 @@ public AssemblyName ToAssemblyName()
         public static AssemblyNameInfo Parse(ReadOnlySpan<char> assemblyName)
             => TryParse(assemblyName, out AssemblyNameInfo? result)
                 ? result!
-#if SYSTEM_REFLECTION_METADATA || SYSTEM_PRIVATE_CORELIB
                 : throw new ArgumentException(SR.InvalidAssemblyName, nameof(assemblyName));
-#else // tools that reference this file as a link
-                : throw new ArgumentException("The given assembly name was invalid.", nameof(assemblyName));
-#endif
 
         /// <summary>
         /// Tries to parse a span of characters into an assembly name.
diff --git a/src/libraries/Common/src/System/Reflection/Metadata/TypeName.cs b/src/libraries/Common/src/System/Reflection/Metadata/TypeName.cs
index 2fac2f8ffd74..1464f0248280 100644
--- a/src/libraries/Common/src/System/Reflection/Metadata/TypeName.cs
+++ b/src/libraries/Common/src/System/Reflection/Metadata/TypeName.cs
@@ -16,10 +16,10 @@
 namespace System.Reflection.Metadata
 {
     [DebuggerDisplay("{AssemblyQualifiedName}")]
-#if SYSTEM_PRIVATE_CORELIB
-    internal
-#else
+#if SYSTEM_REFLECTION_METADATA
     public
+#else
+    internal
 #endif
     sealed class TypeName
     {
diff --git a/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParser.cs b/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParser.cs
index 7c75f3ee844d..dcba442054a5 100644
--- a/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParser.cs
+++ b/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParser.cs
@@ -17,7 +17,8 @@ namespace System.Reflection.Metadata
     [DebuggerDisplay("{_inputString}")]
     internal ref struct TypeNameParser
     {
-        private static readonly TypeNameParseOptions _defaults = new();
+        private static readonly TypeNameParseOptions s_defaults = new();
+
         private readonly bool _throwOnError;
         private readonly TypeNameParseOptions _parseOptions;
         private ReadOnlySpan<char> _inputString;
@@ -26,7 +27,7 @@ private TypeNameParser(ReadOnlySpan<char> name, bool throwOnError, TypeNameParse
         {
             _inputString = name;
             _throwOnError = throwOnError;
-            _parseOptions = options ?? _defaults;
+            _parseOptions = options ?? s_defaults;
         }
 
         internal static TypeName? Parse(ReadOnlySpan<char> typeName, bool throwOnError, TypeNameParseOptions? options = default)
@@ -50,7 +51,7 @@ private TypeNameParser(ReadOnlySpan<char> name, bool throwOnError, TypeNameParse
             {
                 if (throwOnError)
                 {
-                    if (recursiveDepth >= parser._parseOptions.MaxNodes)
+                    if (parser._parseOptions.IsMaxDepthExceeded(recursiveDepth))
                     {
                         ThrowInvalidOperation_MaxNodesExceeded(parser._parseOptions.MaxNodes);
                     }
@@ -249,7 +250,7 @@ private bool TryParseAssemblyName(ref AssemblyNameInfo? assemblyName)
 
         private bool TryDive(ref int depth)
         {
-            if (depth >= _parseOptions.MaxNodes)
+            if (_parseOptions.IsMaxDepthExceeded(depth))
             {
                 return false;
             }
diff --git a/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParserHelpers.cs b/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParserHelpers.cs
index 3783f56c73d4..1cdc5e230ad9 100644
--- a/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParserHelpers.cs
+++ b/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParserHelpers.cs
@@ -331,53 +331,64 @@ internal static bool TryStripFirstCharAndTrailingSpaces(ref ReadOnlySpan<char> s
         }
 
         [DoesNotReturn]
-        internal static void ThrowInvalidOperation_MaxNodesExceeded(int limit) => throw
-#if SYSTEM_REFLECTION_METADATA
-            new InvalidOperationException(SR.Format(SR.InvalidOperation_MaxNodesExceeded, limit));
-#else // corelib and tools that reference this file as a link
-            new InvalidOperationException();
-#endif
+        internal static void ThrowArgumentException_InvalidTypeName(int errorIndex)
+        {
+            throw new ArgumentException(SR.Argument_InvalidTypeName, $"typeName@{errorIndex}");
+        }
 
         [DoesNotReturn]
-        internal static void ThrowArgumentException_InvalidTypeName(int errorIndex) => throw
-#if SYSTEM_PRIVATE_CORELIB
-            new ArgumentException(SR.Arg_ArgumentException, $"typeName@{errorIndex}");
-#elif SYSTEM_REFLECTION_METADATA
-            new ArgumentException(SR.Argument_InvalidTypeName, $"typeName@{errorIndex}");
-#else // tools that reference this file as a link
-            new ArgumentException();
+        internal static void ThrowInvalidOperation_MaxNodesExceeded(int limit)
+        {
+#if SYSTEM_REFLECTION_METADATA
+            throw new InvalidOperationException(SR.Format(SR.InvalidOperation_MaxNodesExceeded, limit));
+#else
+            Debug.Fail("Expected to be unreachable");
+            throw new InvalidOperationException();
 #endif
+        }
 
         [DoesNotReturn]
-        internal static void ThrowInvalidOperation_NotGenericType() => throw
-#if SYSTEM_REFLECTION_METADATA || SYSTEM_PRIVATE_CORELIB
-            new InvalidOperationException(SR.InvalidOperation_NotGenericType);
-#else // tools that reference this file as a link
-            new InvalidOperationException();
+        internal static void ThrowInvalidOperation_NotGenericType()
+        {
+#if SYSTEM_REFLECTION_METADATA
+            throw new InvalidOperationException(SR.InvalidOperation_NotGenericType);
+#else
+            Debug.Fail("Expected to be unreachable");
+            throw new InvalidOperationException();
 #endif
+        }
 
         [DoesNotReturn]
-        internal static void ThrowInvalidOperation_NotNestedType() => throw
+        internal static void ThrowInvalidOperation_NotNestedType()
+        {
 #if SYSTEM_REFLECTION_METADATA
-            new InvalidOperationException(SR.InvalidOperation_NotNestedType);
-#else // corelib and tools that reference this file as a link
-            new InvalidOperationException();
+            throw new InvalidOperationException(SR.InvalidOperation_NotNestedType);
+#else
+            Debug.Fail("Expected to be unreachable");
+            throw new InvalidOperationException();
 #endif
+        }
 
         [DoesNotReturn]
-        internal static void ThrowInvalidOperation_NoElement() => throw
+        internal static void ThrowInvalidOperation_NoElement()
+        {
 #if SYSTEM_REFLECTION_METADATA
-            new InvalidOperationException(SR.InvalidOperation_NoElement);
-#else // corelib and tools that reference this file as a link
-            new InvalidOperationException();
+            throw new InvalidOperationException(SR.InvalidOperation_NoElement);
+#else
+            Debug.Fail("Expected to be unreachable");
+            throw new InvalidOperationException();
 #endif
+        }
 
         [DoesNotReturn]
-        internal static void ThrowInvalidOperation_HasToBeArrayClass() => throw
-#if SYSTEM_REFLECTION_METADATA || SYSTEM_PRIVATE_CORELIB
-            new InvalidOperationException(SR.Argument_HasToBeArrayClass);
-#else // tools that reference this file as a link
-            new InvalidOperationException();
+        internal static void ThrowInvalidOperation_HasToBeArrayClass()
+        {
+#if SYSTEM_REFLECTION_METADATA
+            throw new InvalidOperationException(SR.Argument_HasToBeArrayClass);
+#else
+            Debug.Fail("Expected to be unreachable");
+            throw new InvalidOperationException();
 #endif
+        }
     }
 }
diff --git a/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParserOptions.cs b/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParserOptions.cs
index 66350c9a44ca..551876e73147 100644
--- a/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParserOptions.cs
+++ b/src/libraries/Common/src/System/Reflection/Metadata/TypeNameParserOptions.cs
@@ -3,19 +3,9 @@
 
 namespace System.Reflection.Metadata
 {
-#if SYSTEM_PRIVATE_CORELIB
-    internal
-#else
-    public
-#endif
-    sealed class TypeNameParseOptions
+    public sealed class TypeNameParseOptions
     {
-        private int _maxNodes =
-#if SYSTEM_PRIVATE_CORELIB
-            int.MaxValue; // CoreLib has never introduced any limits
-#else
-            20;
-#endif
+        private int _maxNodes = 20;
 
         /// <summary>
         /// Limits the maximum value of <seealso cref="TypeName.GetNodeCount">node count</seealso> that parser can handle.
@@ -37,5 +27,7 @@ public int MaxNodes
                 _maxNodes = value;
             }
         }
+
+        internal bool IsMaxDepthExceeded(int depth) => depth >= _maxNodes;
     }
 }
diff --git a/src/libraries/Common/src/System/Reflection/TypeNameParser.Helpers.cs b/src/libraries/Common/src/System/Reflection/TypeNameParser.Helpers.cs
index bcb2125d3f4e..84ef2137fb09 100644
--- a/src/libraries/Common/src/System/Reflection/TypeNameParser.Helpers.cs
+++ b/src/libraries/Common/src/System/Reflection/TypeNameParser.Helpers.cs
@@ -8,6 +8,28 @@
 
 #nullable enable
 
+#if SYSTEM_PRIVATE_CORELIB
+namespace System.Reflection.Metadata
+{
+    internal struct TypeNameParseOptions
+    {
+        public TypeNameParseOptions() { }
+#pragma warning disable CA1822 // Mark members as static
+        // CoreLib does not enforce any limits
+        public bool IsMaxDepthExceeded(int _) => false;
+        public int MaxNodes
+        {
+            get
+            {
+                 Debug.Fail("Expected to be unreachable");
+                 return 0;
+            }
+        }
+#pragma warning restore CA1822
+    }
+}
+#endif
+
 namespace System.Reflection
 {
     internal partial struct TypeNameParser
diff --git a/src/libraries/System.Private.CoreLib/src/System.Private.CoreLib.Shared.projitems b/src/libraries/System.Private.CoreLib/src/System.Private.CoreLib.Shared.projitems
index fccffa63fa15..f1b61a1ea67c 100644
--- a/src/libraries/System.Private.CoreLib/src/System.Private.CoreLib.Shared.projitems
+++ b/src/libraries/System.Private.CoreLib/src/System.Private.CoreLib.Shared.projitems
@@ -1424,6 +1424,9 @@
     <Compile Include="$(CommonPath)System\LocalAppContextSwitches.Common.cs">
       <Link>Common\System\LocalAppContextSwitches.Common.cs</Link>
     </Compile>
+    <Compile Include="$(CommonPath)System\HexConverter.cs">
+      <Link>Common\System\HexConverter.cs</Link>
+    </Compile>
     <Compile Include="$(CommonPath)System\HResults.cs">
       <Link>Common\System\HResults.cs</Link>
     </Compile>
@@ -1493,9 +1496,6 @@
     <Compile Include="$(CommonPath)System\Reflection\Metadata\TypeNameParserHelpers.cs">
       <Link>Common\System\Reflection\Metadata\TypeNameParserHelpers.cs</Link>
     </Compile>
-    <Compile Include="$(CommonPath)System\Reflection\Metadata\TypeNameParserOptions.cs">
-      <Link>Common\System\Reflection\Metadata\TypeNameParserOptions.cs</Link>
-    </Compile>
     <Compile Include="$(CommonPath)System\Runtime\Versioning\NonVersionableAttribute.cs">
       <Link>Common\System\Runtime\Versioning\NonVersionableAttribute.cs</Link>
     </Compile>
@@ -1599,11 +1599,6 @@
     <Compile Include="$(MSBuildThisFileDirectory)System\Diagnostics\Tracing\TraceLogging\XplatEventLogger.cs" Condition="'$(FeatureXplatEventSource)' == 'true'" />
     <Compile Include="$(MSBuildThisFileDirectory)System\Runtime\CompilerServices\QCallHandles.cs" Condition="'$(FeatureNativeAot)' != 'true'" />
   </ItemGroup>
-  <ItemGroup>
-    <Compile Include="$(MSBuildThisFileDirectory)\..\..\Common\src\System\HexConverter.cs">
-      <Link>Common\System\HexConverter.cs</Link>
-    </Compile>
-  </ItemGroup>
   <ItemGroup Condition="'$(TargetsWindows)' == 'true'">
     <Compile Include="$(CommonPath)Interop\Windows\Advapi32\Interop.EncryptDecrypt.cs">
       <Link>Common\Interop\Windows\Advapi32\Interop.EncryptDecrypt.cs</Link>
