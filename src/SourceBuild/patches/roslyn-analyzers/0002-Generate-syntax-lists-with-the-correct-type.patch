From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sam Harwell <Sam.Harwell@microsoft.com>
Date: Wed, 19 Apr 2023 16:21:45 -0500
Subject: [PATCH] Generate syntax lists with the correct type

Backport: https://github.com/dotnet/roslyn-analyzers/pull/6596
---
 .../CSharpDynamicInterfaceCastableImplementation.Fixer.cs   | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/NetAnalyzers/CSharp/Microsoft.NetCore.Analyzers/InteropServices/CSharpDynamicInterfaceCastableImplementation.Fixer.cs b/src/NetAnalyzers/CSharp/Microsoft.NetCore.Analyzers/InteropServices/CSharpDynamicInterfaceCastableImplementation.Fixer.cs
index a82b96d21..289f6f8ba 100644
--- a/src/NetAnalyzers/CSharp/Microsoft.NetCore.Analyzers/InteropServices/CSharpDynamicInterfaceCastableImplementation.Fixer.cs
+++ b/src/NetAnalyzers/CSharp/Microsoft.NetCore.Analyzers/InteropServices/CSharpDynamicInterfaceCastableImplementation.Fixer.cs
@@ -163,8 +163,8 @@ SyntaxNode GeneratePropertyImplementation(IPropertySymbol property)
                     SyntaxFactory.List(
                 new[]
                 {
-                        generator.WithStatements(generator.GetAccessor(eventDeclaration, DeclarationKind.AddAccessor), defaultMethodBodyStatements),
-                        generator.WithStatements(generator.GetAccessor(eventDeclaration, DeclarationKind.RemoveAccessor), defaultMethodBodyStatements),
+                        (AccessorDeclarationSyntax)generator.WithStatements(generator.GetAccessor(eventDeclaration, DeclarationKind.AddAccessor), defaultMethodBodyStatements),
+                        (AccessorDeclarationSyntax)generator.WithStatements(generator.GetAccessor(eventDeclaration, DeclarationKind.RemoveAccessor), defaultMethodBodyStatements),
                 })));
         }
 
@@ -249,7 +249,7 @@ protected override async Task<Document> MakeMemberDeclaredOnImplementationTypeSt
                         var currentInvocation = (InvocationExpressionSyntax)node;
 
                         var newArgList = currentInvocation.ArgumentList.WithArguments(
-                            SyntaxFactory.SingletonSeparatedList(generator.Argument(invocation.target))
+                            SyntaxFactory.SingletonSeparatedList((ArgumentSyntax)generator.Argument(invocation.target))
                                 .AddRange(currentInvocation.ArgumentList.Arguments));
                         return currentInvocation.WithArgumentList(newArgList).WithExpression(SyntaxFactory.IdentifierName(symbol.Name));
                     });
