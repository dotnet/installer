From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: James Newton-King <james@newtonking.com>
Date: Thu, 14 Jul 2022 15:41:48 +0800
Subject: [PATCH] React to QUIC connection API changes

Adapted from this PR: https://github.com/dotnet/aspnetcore/pull/42731

---
 .../src/Internal/QuicConnectionContext.cs     | 10 +--
 .../src/Internal/QuicConnectionListener.cs    | 32 ++++++--
 .../QuicStreamContext.FeatureCollection.cs    |  5 +-
 .../src/Internal/QuicStreamContext.cs         | 16 ++--
 .../test/QuicConnectionContextTests.cs        | 81 ++++++++-----------
 .../test/QuicConnectionListenerTests.cs       | 13 +--
 .../test/QuicStreamContextTests.cs            | 70 +++++++---------
 .../Transport.Quic/test/QuicTestHelpers.cs    | 20 ++---
 8 files changed, 119 insertions(+), 128 deletions(-)

diff --git a/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicConnectionContext.cs b/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicConnectionContext.cs
index f3cbb0daaa..6833b23e02 100644
--- a/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicConnectionContext.cs
+++ b/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicConnectionContext.cs
@@ -65,7 +65,7 @@ internal partial class QuicConnectionContext : TransportMultiplexedConnection
             _log.LogWarning(ex, "Failed to gracefully shutdown connection.");
         }
 
-        _connection.Dispose();
+        await _connection.DisposeAsync();
     }
 
     public override void Abort() => Abort(new ConnectionAbortedException("The connection was aborted by the application via MultiplexedConnectionContext.Abort()."));
@@ -91,7 +91,7 @@ internal partial class QuicConnectionContext : TransportMultiplexedConnection
     {
         try
         {
-            var stream = await _connection.AcceptStreamAsync(cancellationToken);
+            var stream = await _connection.AcceptInboundStreamAsync(cancellationToken);
 
             QuicStreamContext? context = null;
 
@@ -194,16 +194,16 @@ internal partial class QuicConnectionContext : TransportMultiplexedConnection
         {
             if (streamDirectionFeature.CanRead)
             {
-                quicStream = await _connection.OpenBidirectionalStreamAsync(cancellationToken);
+                quicStream = await _connection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional, cancellationToken);
             }
             else
             {
-                quicStream = await _connection.OpenUnidirectionalStreamAsync(cancellationToken);
+                quicStream = await _connection.OpenOutboundStreamAsync(QuicStreamType.Unidirectional, cancellationToken);
             }
         }
         else
         {
-            quicStream = await _connection.OpenBidirectionalStreamAsync(cancellationToken);
+            quicStream = await _connection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional, cancellationToken);
         }
 
         // Only a handful of control streams are created by the server and they last for the
diff --git a/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicConnectionListener.cs b/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicConnectionListener.cs
index 15e8b02af3..f8d5c4959d 100644
--- a/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicConnectionListener.cs
+++ b/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicConnectionListener.cs
@@ -37,12 +37,32 @@ internal sealed class QuicConnectionListener : IMultiplexedConnectionListener, I
             throw new InvalidOperationException($"QUIC doesn't support listening on the configured endpoint type. Expected {nameof(IPEndPoint)} but got {endpoint.GetType().Name}.");
         }
 
-        _quicListenerOptions.ServerAuthenticationOptions = sslServerAuthenticationOptions;
-        _quicListenerOptions.ListenEndPoint = listenEndPoint;
-        _quicListenerOptions.IdleTimeout = options.IdleTimeout;
-        _quicListenerOptions.MaxBidirectionalStreams = options.MaxBidirectionalStreamCount;
-        _quicListenerOptions.MaxUnidirectionalStreams = options.MaxUnidirectionalStreamCount;
-        _quicListenerOptions.ListenBacklog = options.Backlog;
+        if (sslServerAuthenticationOptions.ApplicationProtocols is null || sslServerAuthenticationOptions.ApplicationProtocols.Count == 0)
+        {
+            throw new InvalidOperationException("No application protocols specified.");
+        }
+
+        _log = log;
+        _context = new QuicTransportContext(_log, options);
+        _quicListenerOptions = new QuicListenerOptions
+        {
+            ApplicationProtocols = sslServerAuthenticationOptions.ApplicationProtocols,
+            ListenEndPoint = listenEndPoint,
+            ListenBacklog = options.Backlog,
+            ConnectionOptionsCallback = (connection, helloInfo, cancellationToken) =>
+            {
+                var connectionOptions = new QuicServerConnectionOptions
+                {
+                    ServerAuthenticationOptions = sslServerAuthenticationOptions,
+                    IdleTimeout = options.IdleTimeout,
+                    MaxInboundBidirectionalStreams = options.MaxBidirectionalStreamCount,
+                    MaxInboundUnidirectionalStreams = options.MaxUnidirectionalStreamCount,
+                    DefaultCloseErrorCode = 0,
+                    DefaultStreamErrorCode = 0,
+                };
+                return ValueTask.FromResult(connectionOptions);
+            }
+        };
 
         // Setting to listenEndPoint to prevent the property from being null.
         // This will be initialized when CreateListenerAsync() is invoked.
diff --git a/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicStreamContext.FeatureCollection.cs b/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicStreamContext.FeatureCollection.cs
index c01209238b..b3728699f0 100644
--- a/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicStreamContext.FeatureCollection.cs
+++ b/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicStreamContext.FeatureCollection.cs
@@ -1,6 +1,7 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Net.Quic;
 using Microsoft.AspNetCore.Connections;
 using Microsoft.AspNetCore.Connections.Features;
 
@@ -41,7 +42,7 @@ internal sealed partial class QuicStreamContext : IPersistentStateFeature, IStre
                 {
                     _shutdownReadReason = abortReason;
                     QuicLog.StreamAbortRead(_log, this, errorCode, abortReason.Message);
-                    _stream.AbortRead(errorCode);
+                    _stream.Abort(QuicAbortDirection.Read, errorCode);
                 }
                 else
                 {
@@ -61,7 +62,7 @@ internal sealed partial class QuicStreamContext : IPersistentStateFeature, IStre
                 {
                     _shutdownWriteReason = abortReason;
                     QuicLog.StreamAbortWrite(_log, this, errorCode, abortReason.Message);
-                    _stream.AbortWrite(errorCode);
+                    _stream.Abort(QuicAbortDirection.Write, errorCode);
                 }
                 else
                 {
diff --git a/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicStreamContext.cs b/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicStreamContext.cs
index ec2b410752..80a89787bc 100644
--- a/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicStreamContext.cs
+++ b/src/Servers/Kestrel/Transport.Quic/src/Internal/QuicStreamContext.cs
@@ -92,7 +92,7 @@ internal partial class QuicStreamContext : TransportConnection, IPooledStream, I
         CanRead = _stream.CanRead;
         CanWrite = _stream.CanWrite;
         _error = null;
-        StreamId = _stream.StreamId;
+        StreamId = _stream.Id;
         PoolExpirationTicks = 0;
 
         Transport = _originalTransport;
@@ -174,7 +174,7 @@ internal partial class QuicStreamContext : TransportConnection, IPooledStream, I
 
         try
         {
-            await _stream.WaitForWriteCompletionAsync();
+            await _stream.WritesClosed;
         }
         catch (Exception ex)
         {
@@ -211,7 +211,7 @@ internal partial class QuicStreamContext : TransportConnection, IPooledStream, I
 
                 ValueTask<FlushResult> flushTask;
 
-                if (_stream.ReadsCompleted)
+                if (_stream.ReadsClosed.IsCompletedSuccessfully)
                 {
                     // If the data returned from ReadAsync is the final chunk on the stream then
                     // flush data and end pipe together with CompleteAsync.
@@ -381,7 +381,7 @@ internal partial class QuicStreamContext : TransportConnection, IPooledStream, I
                     if (buffer.IsSingleSegment)
                     {
                         // Fast path when the buffer is a single segment.
-                        await _stream.WriteAsync(buffer.First, endStream: isCompleted);
+                        await _stream.WriteAsync(buffer.First, completeWrites: isCompleted);
                     }
                     else
                     {
@@ -395,7 +395,7 @@ internal partial class QuicStreamContext : TransportConnection, IPooledStream, I
                         {
                             var currentSegment = enumerator.Current;
                             isLastSegment = !enumerator.MoveNext();
-                            await _stream.WriteAsync(currentSegment, endStream: isLastSegment && isCompleted);
+                            await _stream.WriteAsync(currentSegment, completeWrites: isLastSegment && isCompleted);
                         }
                     }
                 }
@@ -478,11 +478,11 @@ internal partial class QuicStreamContext : TransportConnection, IPooledStream, I
             {
                 if (_stream.CanRead)
                 {
-                    _stream.AbortRead(resolvedErrorCode);
+                    _stream.Abort(QuicAbortDirection.Read, resolvedErrorCode);
                 }
                 if (_stream.CanWrite)
                 {
-                    _stream.AbortWrite(resolvedErrorCode);
+                    _stream.Abort(QuicAbortDirection.Write, resolvedErrorCode);
                 }
             }
         }
@@ -503,7 +503,7 @@ internal partial class QuicStreamContext : TransportConnection, IPooledStream, I
                 _shutdownReason = shutdownReason ?? new ConnectionAbortedException("The QUIC transport's send loop completed gracefully.");
                 QuicLog.StreamShutdownWrite(_log, this, _shutdownReason.Message);
 
-                _stream.Shutdown();
+                _stream.CompleteWrites();
             }
         }
         catch (Exception ex)
diff --git a/src/Servers/Kestrel/Transport.Quic/test/QuicConnectionContextTests.cs b/src/Servers/Kestrel/Transport.Quic/test/QuicConnectionContextTests.cs
index a04a4eb9d7..b754067682 100644
--- a/src/Servers/Kestrel/Transport.Quic/test/QuicConnectionContextTests.cs
+++ b/src/Servers/Kestrel/Transport.Quic/test/QuicConnectionContextTests.cs
@@ -23,8 +23,6 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
     public async Task AcceptAsync_CancellationThenAccept_AcceptStreamAfterCancellation()
     {
         // Arrange
-        var connectionClosedTcs = new TaskCompletionSource(TaskCreationOptions.RunContinuationsAsynchronously);
-
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         // Act
@@ -32,8 +30,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
 
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await acceptTask.DefaultTimeout();
 
@@ -48,7 +45,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         // Wait for stream after cancellation
         acceptStreamTask = serverConnection.AcceptAsync();
 
-        await using var clientStream = await clientConnection.OpenBidirectionalStreamAsync();
+        await using var clientStream = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
         await clientStream.WriteAsync(TestData);
 
         // Assert
@@ -74,8 +71,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
 
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await acceptTask.DefaultTimeout();
         serverConnection.ConnectionClosed.Register(() => connectionClosedTcs.SetResult());
@@ -100,15 +96,14 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
         var acceptTask = serverConnection.AcceptAsync();
 
-        await using var clientStream = await quicConnection.OpenUnidirectionalStreamAsync();
+        await using var clientStream = await quicConnection.OpenOutboundStreamAsync(QuicStreamType.Unidirectional);
         await clientStream.WriteAsync(TestData);
 
         await using var serverStream = await acceptTask.DefaultTimeout();
@@ -126,7 +121,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         serverStream.Transport.Input.AdvanceTo(read.Buffer.End);
 
         // Shutdown client.
-        clientStream.Shutdown();
+        clientStream.CompleteWrites();
 
         // Receive shutdown on server.
         read = await serverStream.Transport.Input.ReadAsync().DefaultTimeout();
@@ -143,15 +138,14 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
         var acceptTask = serverConnection.AcceptAsync();
 
-        await using var clientStream = await quicConnection.OpenBidirectionalStreamAsync();
+        await using var clientStream = await quicConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
         await clientStream.WriteAsync(TestData);
 
         await using var serverStream = await acceptTask.DefaultTimeout();
@@ -175,7 +169,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         Assert.Equal(TestData, data);
 
         // Shutdown from client.
-        clientStream.Shutdown();
+        clientStream.CompleteWrites();
 
         // Get shutdown from client.
         read = await serverStream.Transport.Input.ReadAsync().DefaultTimeout();
@@ -194,13 +188,12 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
-        var acceptTask = quicConnection.AcceptStreamAsync();
+        var acceptTask = quicConnection.AcceptInboundStreamAsync();
 
         await using var serverStream = await serverConnection.ConnectAsync();
         await serverStream.Transport.Output.WriteAsync(TestData).DefaultTimeout();
@@ -240,8 +233,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -266,8 +258,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -278,8 +269,8 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         var quicConnectionContext = Assert.IsType<QuicConnectionContext>(serverConnection);
         Assert.Equal(0, quicConnectionContext.StreamPool.Count);
 
-        var clientStream = await clientConnection.OpenBidirectionalStreamAsync();
-        await clientStream.WriteAsync(TestData, endStream: true).DefaultTimeout();
+        var clientStream = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
+        await clientStream.WriteAsync(TestData, completeWrites: true).DefaultTimeout();
         var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
         var readResult = await serverStream.Transport.Input.ReadAtLeastAsync(TestData.Length).DefaultTimeout();
         serverStream.Transport.Input.AdvanceTo(readResult.Buffer.End);
@@ -310,8 +301,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -322,8 +312,8 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         var quicConnectionContext = Assert.IsType<QuicConnectionContext>(serverConnection);
         Assert.Equal(0, quicConnectionContext.StreamPool.Count);
 
-        var clientStream = await clientConnection.OpenBidirectionalStreamAsync();
-        await clientStream.WriteAsync(TestData, endStream: true).DefaultTimeout();
+        var clientStream = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
+        await clientStream.WriteAsync(TestData, completeWrites: true).DefaultTimeout();
         var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
         var readResult = await serverStream.Transport.Input.ReadAtLeastAsync(TestData.Length).DefaultTimeout();
         serverStream.Transport.Input.AdvanceTo(readResult.Buffer.End);
@@ -356,8 +346,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -368,14 +357,14 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         var quicConnectionContext = Assert.IsType<QuicConnectionContext>(serverConnection);
         Assert.Equal(0, quicConnectionContext.StreamPool.Count);
 
-        var clientStream = await clientConnection.OpenBidirectionalStreamAsync();
+        var clientStream = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
         await clientStream.WriteAsync(TestData).DefaultTimeout();
 
         var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
         var readResult = await serverStream.Transport.Input.ReadAtLeastAsync(TestData.Length).DefaultTimeout();
         serverStream.Transport.Input.AdvanceTo(readResult.Buffer.End);
 
-        clientStream.AbortWrite((long)Http3ErrorCode.InternalError);
+        clientStream.Abort(QuicAbortDirection.Write, (long)Http3ErrorCode.InternalError);
 
         // Receive abort form client.
         var ex = await Assert.ThrowsAsync<ConnectionResetException>(() => serverStream.Transport.Input.ReadAsync().AsTask()).DefaultTimeout();
@@ -404,8 +393,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -416,14 +404,14 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         var quicConnectionContext = Assert.IsType<QuicConnectionContext>(serverConnection);
         Assert.Equal(0, quicConnectionContext.StreamPool.Count);
 
-        var clientStream = await clientConnection.OpenBidirectionalStreamAsync();
+        var clientStream = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
         await clientStream.WriteAsync(TestData).DefaultTimeout();
 
         var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
         var readResult = await serverStream.Transport.Input.ReadAtLeastAsync(TestData.Length).DefaultTimeout();
         serverStream.Transport.Input.AdvanceTo(readResult.Buffer.End);
 
-        clientStream.AbortWrite((long)Http3ErrorCode.InternalError);
+        clientStream.Abort(QuicAbortDirection.Write, (long)Http3ErrorCode.InternalError);
 
         // Receive abort form client.
         var serverEx = await Assert.ThrowsAsync<ConnectionResetException>(() => serverStream.Transport.Input.ReadAsync().AsTask()).DefaultTimeout();
@@ -462,8 +450,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory, testSystemClock);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -517,8 +504,7 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -551,8 +537,8 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
 
         static async Task SendStream(RequestState requestState)
         {
-            var clientStream = await requestState.QuicConnection.OpenBidirectionalStreamAsync();
-            await clientStream.WriteAsync(TestData, endStream: true).DefaultTimeout();
+            var clientStream = await requestState.QuicConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
+            await clientStream.WriteAsync(TestData, completeWrites: true).DefaultTimeout();
             var serverStream = await requestState.ServerConnection.AcceptAsync().DefaultTimeout();
             var readResult = await serverStream.Transport.Input.ReadAtLeastAsync(TestData.Length).DefaultTimeout();
             serverStream.Transport.Input.AdvanceTo(readResult.Buffer.End);
@@ -596,15 +582,14 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
         Logger.LogInformation("Client starting stream 1");
-        var clientStream1 = await clientConnection.OpenBidirectionalStreamAsync();
-        await clientStream1.WriteAsync(TestData, endStream: true).DefaultTimeout();
+        var clientStream1 = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
+        await clientStream1.WriteAsync(TestData, completeWrites: true).DefaultTimeout();
 
         Logger.LogInformation("Server accept stream 1");
         var serverStream1 = await serverConnection.AcceptAsync().DefaultTimeout();
@@ -631,8 +616,8 @@ public class QuicConnectionContextTests : TestApplicationErrorLoggerLoggedTest
         quicStreamContext1.Dispose();
 
         Logger.LogInformation("Client starting stream 2");
-        var clientStream2 = await clientConnection.OpenBidirectionalStreamAsync();
-        await clientStream2.WriteAsync(TestData, endStream: true).DefaultTimeout();
+        var clientStream2 = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
+        await clientStream2.WriteAsync(TestData, completeWrites: true).DefaultTimeout();
 
         Logger.LogInformation("Server accept stream 2");
         var serverStream2 = await serverConnection.AcceptAsync().DefaultTimeout();
diff --git a/src/Servers/Kestrel/Transport.Quic/test/QuicConnectionListenerTests.cs b/src/Servers/Kestrel/Transport.Quic/test/QuicConnectionListenerTests.cs
index 0080b1d8d3..564056574c 100644
--- a/src/Servers/Kestrel/Transport.Quic/test/QuicConnectionListenerTests.cs
+++ b/src/Servers/Kestrel/Transport.Quic/test/QuicConnectionListenerTests.cs
@@ -44,8 +44,7 @@ public class QuicConnectionListenerTests : TestApplicationErrorLoggerLoggedTest
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
 
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         // Assert
         await using var serverConnection = await acceptTask.DefaultTimeout();
@@ -72,15 +71,14 @@ public class QuicConnectionListenerTests : TestApplicationErrorLoggerLoggedTest
         options.ClientAuthenticationOptions.ClientCertificates = new X509CertificateCollection { testCert };
 
         // Act
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
         // Server waits for stream from client
         var serverStreamTask = serverConnection.AcceptAsync().DefaultTimeout();
 
         // Client creates stream
-        using var clientStream = await quicConnection.OpenBidirectionalStreamAsync();
+        using var clientStream = await quicConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
         await clientStream.WriteAsync(TestData).DefaultTimeout();
 
         // Server finishes accepting
@@ -108,9 +106,6 @@ public class QuicConnectionListenerTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory, clientCertificateRequired: true);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-
-        await clientConnection.ConnectAsync().DefaultTimeout();
-        Assert.True(clientConnection.Connected);
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
     }
 }
diff --git a/src/Servers/Kestrel/Transport.Quic/test/QuicStreamContextTests.cs b/src/Servers/Kestrel/Transport.Quic/test/QuicStreamContextTests.cs
index b024e58884..6dde93b0f8 100644
--- a/src/Servers/Kestrel/Transport.Quic/test/QuicStreamContextTests.cs
+++ b/src/Servers/Kestrel/Transport.Quic/test/QuicStreamContextTests.cs
@@ -31,8 +31,7 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -56,13 +55,12 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
-        var clientStream = await clientConnection.OpenBidirectionalStreamAsync();
+        var clientStream = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
         await clientStream.WriteAsync(TestData).DefaultTimeout();
         var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
         var readResult = await serverStream.Transport.Input.ReadAtLeastAsync(TestData.Length).DefaultTimeout();
@@ -103,13 +101,12 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
-        var clientStream = await clientConnection.OpenBidirectionalStreamAsync();
+        var clientStream = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
         await clientStream.WriteAsync(TestData).DefaultTimeout();
 
         var readTask = clientStream.ReadUntilEndAsync();
@@ -133,8 +130,8 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         var disposeTask = quicStreamContext.DisposeAsync();
 
         // Client aborts while server is draining
-        clientStream.AbortRead((long)Http3ErrorCode.RequestCancelled);
-        clientStream.AbortWrite((long)Http3ErrorCode.RequestCancelled);
+        clientStream.Abort(QuicAbortDirection.Read, (long)Http3ErrorCode.RequestCancelled);
+        clientStream.Abort(QuicAbortDirection.Write, (long)Http3ErrorCode.RequestCancelled);
 
         // Server finishes disposing
         await disposeTask.DefaultTimeout();
@@ -163,15 +160,14 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
         Logger.LogInformation("Client starting stream.");
-        var clientStream = await clientConnection.OpenBidirectionalStreamAsync();
-        await clientStream.WriteAsync(TestData, endStream: true).DefaultTimeout();
+        var clientStream = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
+        await clientStream.WriteAsync(TestData, completeWrites: true).DefaultTimeout();
         var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
 
         Logger.LogInformation("Server accepted stream.");
@@ -221,8 +217,7 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var clientConnection = await QuicConnection.ConnectAsync(options);
-        await clientConnection.ConnectAsync().DefaultTimeout();
+        await using var clientConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -244,13 +239,12 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
-        await using var clientStream = await quicConnection.OpenBidirectionalStreamAsync();
+        await using var clientStream = await quicConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
         await clientStream.WriteAsync(TestData).DefaultTimeout();
 
         await using var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
@@ -260,7 +254,7 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         var closedTcs = new TaskCompletionSource(TaskCreationOptions.RunContinuationsAsynchronously);
         serverStream.ConnectionClosed.Register(() => closedTcs.SetResult());
 
-        clientStream.AbortWrite((long)Http3ErrorCode.InternalError);
+        clientStream.Abort(QuicAbortDirection.Write, (long)Http3ErrorCode.InternalError);
 
         // Receive abort from client.
         var ex = await Assert.ThrowsAsync<ConnectionResetException>(() => serverStream.Transport.Input.ReadAsync().AsTask()).DefaultTimeout();
@@ -289,14 +283,13 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
-        await using var clientStream = await quicConnection.OpenUnidirectionalStreamAsync();
-        await clientStream.WriteAsync(TestData, endStream: true).DefaultTimeout();
+        await using var clientStream = await quicConnection.OpenOutboundStreamAsync(QuicStreamType.Unidirectional);
+        await clientStream.WriteAsync(TestData, completeWrites: true).DefaultTimeout();
 
         await using var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
         var readResult = await serverStream.Transport.Input.ReadAtLeastAsync(TestData.Length).DefaultTimeout();
@@ -324,13 +317,12 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
-        await using var clientStream = await quicConnection.OpenUnidirectionalStreamAsync();
+        await using var clientStream = await quicConnection.OpenOutboundStreamAsync(QuicStreamType.Unidirectional);
         await clientStream.WriteAsync(TestData).DefaultTimeout();
 
         await using var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
@@ -340,7 +332,7 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         var closedTcs = new TaskCompletionSource(TaskCreationOptions.RunContinuationsAsynchronously);
         serverStream.ConnectionClosed.Register(() => closedTcs.SetResult());
 
-        clientStream.AbortWrite((long)Http3ErrorCode.InternalError);
+        clientStream.Abort(QuicAbortDirection.Write, (long)Http3ErrorCode.InternalError);
 
         // Receive abort from client.
         var ex = await Assert.ThrowsAsync<ConnectionResetException>(() => serverStream.Transport.Input.ReadAsync().AsTask()).DefaultTimeout();
@@ -364,13 +356,12 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
-        await using var clientStream = await quicConnection.OpenUnidirectionalStreamAsync();
+        await using var clientStream = await quicConnection.OpenOutboundStreamAsync(QuicStreamType.Unidirectional);
         await clientStream.WriteAsync(TestData).DefaultTimeout();
 
         await using var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
@@ -379,7 +370,7 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
 
         var readResultTask = serverStream.Transport.Input.ReadAsync();
 
-        await clientStream.WriteAsync(TestData, endStream: true).DefaultTimeout();
+        await clientStream.WriteAsync(TestData, completeWrites: true).DefaultTimeout();
 
         // Assert
         var completeReadResult = await readResultTask.DefaultTimeout();
@@ -396,8 +387,7 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -407,7 +397,7 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         var serverStream = await serverConnection.ConnectAsync(features).DefaultTimeout();
         await serverStream.Transport.Output.WriteAsync(TestData).DefaultTimeout();
 
-        await using var clientStream = await quicConnection.AcceptStreamAsync();
+        await using var clientStream = await quicConnection.AcceptInboundStreamAsync();
 
         var data = await clientStream.ReadAtLeastLengthAsync(TestData.Length).DefaultTimeout();
 
@@ -438,8 +428,7 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
@@ -449,7 +438,7 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         var serverStream = await serverConnection.ConnectAsync(features).DefaultTimeout();
         await serverStream.Transport.Output.WriteAsync(TestData).DefaultTimeout();
 
-        await using var clientStream = await quicConnection.AcceptStreamAsync();
+        await using var clientStream = await quicConnection.AcceptInboundStreamAsync();
 
         var data = await clientStream.ReadAtLeastLengthAsync(TestData.Length).DefaultTimeout();
 
@@ -482,13 +471,12 @@ public class QuicStreamContextTests : TestApplicationErrorLoggerLoggedTest
         await using var connectionListener = await QuicTestHelpers.CreateConnectionListenerFactory(LoggerFactory);
 
         var options = QuicTestHelpers.CreateClientConnectionOptions(connectionListener.EndPoint);
-        using var quicConnection = await QuicConnection.ConnectAsync(options);
-        await quicConnection.ConnectAsync().DefaultTimeout();
+        await using var quicConnection = await QuicConnection.ConnectAsync(options);
 
         await using var serverConnection = await connectionListener.AcceptAndAddFeatureAsync().DefaultTimeout();
 
         // Act
-        await using var clientStream = await quicConnection.OpenBidirectionalStreamAsync();
+        await using var clientStream = await quicConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
         await clientStream.WriteAsync(TestData).DefaultTimeout();
 
         await using var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
diff --git a/src/Servers/Kestrel/Transport.Quic/test/QuicTestHelpers.cs b/src/Servers/Kestrel/Transport.Quic/test/QuicTestHelpers.cs
index 7c60088eac..667691c6ac 100644
--- a/src/Servers/Kestrel/Transport.Quic/test/QuicTestHelpers.cs
+++ b/src/Servers/Kestrel/Transport.Quic/test/QuicTestHelpers.cs
@@ -71,7 +71,7 @@ internal static class QuicTestHelpers
     public static async ValueTask<MultiplexedConnectionContext> AcceptAndAddFeatureAsync(this IMultiplexedConnectionListener listener)
     {
         var connection = await listener.AcceptAsync();
-        connection.Features.Set<IConnectionHeartbeatFeature>(new TestConnectionHeartbeatFeature());
+        connection?.Features.Set<IConnectionHeartbeatFeature>(new TestConnectionHeartbeatFeature());
         return connection;
     }
 
@@ -91,24 +91,26 @@ internal static class QuicTestHelpers
     {
         return new QuicClientConnectionOptions
         {
-            MaxBidirectionalStreams = 200,
-            MaxUnidirectionalStreams = 200,
+            MaxInboundBidirectionalStreams = 200,
+            MaxInboundUnidirectionalStreams = 200,
             RemoteEndPoint = remoteEndPoint,
             ClientAuthenticationOptions = new SslClientAuthenticationOptions
             {
                 ApplicationProtocols = new List<SslApplicationProtocol>
-                    {
-                        SslApplicationProtocol.Http3
-                    },
+                {
+                    SslApplicationProtocol.Http3
+                },
                 RemoteCertificateValidationCallback = RemoteCertificateValidationCallback
-            }
+            },
+            DefaultStreamErrorCode = 0,
+            DefaultCloseErrorCode = 0,
         };
     }
 
     public static async Task<QuicStreamContext> CreateAndCompleteBidirectionalStreamGracefully(QuicConnection clientConnection, MultiplexedConnectionContext serverConnection)
     {
-        var clientStream = await clientConnection.OpenBidirectionalStreamAsync();
-        await clientStream.WriteAsync(TestData, endStream: true).DefaultTimeout();
+        var clientStream = await clientConnection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);
+        await clientStream.WriteAsync(TestData, completeWrites: true).DefaultTimeout();
         var serverStream = await serverConnection.AcceptAsync().DefaultTimeout();
         var readResult = await serverStream.Transport.Input.ReadAtLeastAsync(TestData.Length).DefaultTimeout();
         serverStream.Transport.Input.AdvanceTo(readResult.Buffer.End);
