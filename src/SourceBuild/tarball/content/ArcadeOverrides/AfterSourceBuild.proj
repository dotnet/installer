<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project DefaultTargets="AfterSourceBuild">

  <Import Project="..\BuildStep.props" />

  <UsingTask TaskName="Microsoft.DotNet.Arcade.Sdk.GetLicenseFilePath" AssemblyFile="$(ArcadeSdkBuildTasksAssembly)" />

  <PropertyGroup>
    <MicrosoftDotNetSourceBuildTasksBuildDir>$(NuGetPackageRoot)microsoft.dotnet.sourcebuild.tasks\$(MicrosoftDotNetSourceBuildTasksVersion)\build\</MicrosoftDotNetSourceBuildTasksBuildDir>
  </PropertyGroup>

  <Import Project="$(MicrosoftDotNetSourceBuildTasksBuildDir)Microsoft.DotNet.SourceBuild.Tasks.props" />

  <Target Name="AfterSourceBuild"
          Condition="'$(ArcadeInnerBuildFromSource)' != 'true'"
          DependsOnTargets="
            ReportPrebuiltUsage;
            PackSourceBuildIntermediateNupkgs" />

  <Target Name="WritePrebuiltUsageData">
    <ItemGroup>
      <AllRestoredPackageFiles Include="$(CurrentRepoSourceBuildPackageCache)**/*.nupkg" />
      <SourceBuiltPackageFiles Include="$(CurrentRepoSourceBuiltNupkgCacheDir)**/*.nupkg" />
      <SourceBuiltPackageFiles Include="$(AdditionalSourceBuiltNupkgCacheDir)**/*.nupkg" Condition=" '$(AdditionalSourceBuiltNupkgCacheDir)' != '' " />
      <SourceBuiltPackageFiles Include="$(ReferencePackageNupkgCacheDir)**/*.nupkg" Condition=" '$(ReferencePackageNupkgCacheDir)' != '' " />
      <SourceBuiltPackageFiles Include="$(PreviouslySourceBuiltNupkgCacheDir)**/*.nupkg" Condition=" '$(PreviouslySourceBuiltNupkgCacheDir)' != '' " />

      <!-- Add some other potential top-level project directories for a more specific report. -->
      <ProjectDirectories Include="$(CurrentRepoSourceBuildSourceDir)" />
      <!-- Finally, scan entire source-build, in case project.assets.json ends up in an unexpected place. -->
      <ProjectDirectories Include="$(SourceBuildSelfDir)" />
    </ItemGroup>

    <PropertyGroup>
      <PackageReportDataFile Condition="'$(PackageReportDataFile)' == ''">$([MSBuild]::NormalizePath('$(SourceBuildSelfPrebuiltReportDir)prebuilt-usage.xml'))</PackageReportDataFile>
    </PropertyGroup>

    <WritePackageUsageData
      RestoredPackageFiles="@(AllRestoredPackageFiles)"
      TarballPrebuiltPackageFiles="@(TarballPrebuiltPackageFiles)"
      SourceBuiltPackageFiles="@(SourceBuiltPackageFiles)"
      ReferencePackageFiles="@(ReferencePackageFiles)"
      PlatformsRuntimeJsonFiles="@(PlatformsRuntimeJsonFiles)"
      TargetRid="$(TargetRid)"
      ProjectDirectories="@(ProjectDirectories)"
      RootDir="$(SourceBuildSelfDir)"
      IgnoredProjectAssetsJsonFiles="@(IgnoredProjectAssetsJsonFiles)"
      DataFile="$(PackageReportDataFile)"
      ProjectAssetsJsonArchiveFile="$(ProjectAssetsJsonArchiveFile)" />
  </Target>

  <Target Name="ReportPrebuiltUsage"
          DependsOnTargets="WritePrebuiltUsageData">
    <PropertyGroup>
      <FailOnPrebuiltBaselineError Condition="'$(FailOnPrebuiltBaselineError)' == ''">false</FailOnPrebuiltBaselineError>
    </PropertyGroup>

    <WriteUsageReports
      DataFile="$(PackageReportDataFile)"
      PoisonedReportFile="$(PoisonedReportFile)"
      OutputDirectory="$(SourceBuildSelfPrebuiltReportDir)" />

    <PropertyGroup Condition="'$(ContinueOnPrebuiltBaselineError)' == ''">
      <ContinueOnPrebuiltBaselineError>false</ContinueOnPrebuiltBaselineError>
      <ContinueOnPrebuiltBaselineError Condition="'$(FailOnPrebuiltBaselineError)' != 'true'">true</ContinueOnPrebuiltBaselineError>
    </PropertyGroup>

    <ValidateUsageAgainstBaseline
      DataFile="$(PackageReportDataFile)"
      BaselineDataFile="$(PrebuiltBaselineDataFile)"
      BaselineDataUpdateHintFile="$(PrebuiltBaselineDataFileDefault)"
      OutputBaselineFile="$(SourceBuildSelfPrebuiltReportDir)generated-new-baseline.xml"
      OutputReportFile="$(SourceBuildSelfPrebuiltReportDir)baseline-comparison.xml"
      AllowTestProjectUsage="$(AllowTestProjectUsage)"
      ContinueOnError="$(ContinueOnPrebuiltBaselineError)" />
  </Target>

  <!--
    Copies the intermediate nupkg project to 'artifacts/' so the repo's global.json is in an
    ancestor dir. This helps ensure the same version of Arcade is used throughout the build.
  -->
  <Target Name="CopyIntermediateNupkgProjToProjectDirectory">
    <PropertyGroup>
      <SourceBuildIntermediateProjFile>$(MSBuildThisFileDirectory)SourceBuildIntermediate.proj</SourceBuildIntermediateProjFile>
      <SourceBuildIntermediateProjTargetFile>$(ArtifactsObjDir)ArcadeGeneratedProjects\SourceBuildIntermediate\SourceBuildIntermediate.proj</SourceBuildIntermediateProjTargetFile>
    </PropertyGroup>

    <Copy
      SourceFiles="$(SourceBuildIntermediateProjFile)"
      DestinationFiles="$(SourceBuildIntermediateProjTargetFile)" />

    <!-- Run a restore so the SDK doesn't complain. Nothing should actually get restored. -->
    <MSBuild
      Projects="$(SourceBuildIntermediateProjTargetFile)"
      Targets="Restore"
      Properties="
        SourceBuildArcadeTargetsFile=$(MSBuildThisFileDirectory)SourceBuildArcade.targets;
        " />
  </Target>

  <Target Name="GetLicenseFileForIntermediateNupkgPack"
          Condition="'$(DetectSourceBuildIntermediateNupkgLicense)' == 'true'">
    <!-- Find the repository's global LICENSE file to apply. -->
    <Microsoft.DotNet.Arcade.Sdk.GetLicenseFilePath Directory="$(RepoRoot)">
      <Output TaskParameter="Path" PropertyName="DetectedLicenseFile"/>
    </Microsoft.DotNet.Arcade.Sdk.GetLicenseFilePath>

    <!-- Copy it to a file with '.txt' extension to avoid running into this NuGet problem: https://github.com/NuGet/Home/issues/7601 -->
    <PropertyGroup>
      <SourceBuildIntermediateNupkgLicenseFile>$(ArtifactsObjDir)ArcadeGeneratedProjects\SourceBuildIntermediate\LICENSE.txt</SourceBuildIntermediateNupkgLicenseFile>
    </PropertyGroup>

    <Copy
      SourceFiles="$(DetectedLicenseFile)"
      DestinationFiles="$(SourceBuildIntermediateNupkgLicenseFile)" />
  </Target>

  <!--
    Create source-build intermediate NuGet package and supplemental intermediate NuGet packages (if
    necessary) for dependency transport to downstream repos.
  -->
  <Target Name="PackSourceBuildIntermediateNupkgs"
          DependsOnTargets="
            CopyIntermediateNupkgProjToProjectDirectory;
            GetLicenseFileForIntermediateNupkgPack;
            GetCategorizedIntermediateNupkgContents;
            GetSourceBuildIntermediateNupkgNameConvention">
    <ItemGroup>
      <IntermediateNupkgProject Include="$(SourceBuildIntermediateProjTargetFile)" />

      <IntermediateNupkgProject
        Include="$(SourceBuildIntermediateProjTargetFile)"
        Condition=" '%(SupplementalIntermediateNupkgCategory.Identity)' != '' "
        AdditionalProperties="
          SupplementalIntermediateNupkgCategory=%(SupplementalIntermediateNupkgCategory.Identity)" />
    </ItemGroup>

    <PropertyGroup>
      <IntermediateNupkgBuildMessage>Building intermediate nupkg</IntermediateNupkgBuildMessage>
      <IntermediateNupkgBuildMessage Condition=" '@(SupplementalIntermediateNupkgCategory)' != '' ">$(IntermediateNupkgBuildMessage), and supplemental nupkgs for @(SupplementalIntermediateNupkgCategory, ', ')</IntermediateNupkgBuildMessage>
    </PropertyGroup>

    <Message Importance="High" Text="$(IntermediateNupkgBuildMessage)..." />

    <MSBuild
      Projects="@(IntermediateNupkgProject)"
      Targets="Pack"
      Properties="
        CurrentRepoSourceBuildArtifactsPackagesDir=$(CurrentRepoSourceBuildArtifactsPackagesDir);
        SourceBuildArcadeTargetsFile=$(MSBuildThisFileDirectory)SourceBuildArcade.targets;
        SourceBuildIntermediateNupkgLicenseFile=$(SourceBuildIntermediateNupkgLicenseFile);
        "
      BuildInParallel="true"/>
  </Target>

  <Import Project="SourceBuildArcade.targets" />

</Project>
