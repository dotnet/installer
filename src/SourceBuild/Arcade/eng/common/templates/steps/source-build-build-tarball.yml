# Steps used to build a source-build tarball

parameters:
  # Additional custom build args
  additionalBuildArgs: ""

  # Architecture to build
  buildArch: null

  # Container image to build within
  container: null

  # Skip running the OmniSharp smoke-tests
  excludeOmniSharpTests: false

  # Resource id of the installer build to retrieve source/product tarball's from
  installerBuildResourceId: null

  # Whether or not this is a bootstrapped build
  isBootstrapped: false

  # Platform the build is running on (linux, osx, win)
  platform: null

  # Script logic to prep the tarball for building
  prepScript: null

  # Whether or not to build online
  runOnline: null

  # Directory to build the tarball in
  tarballDir:

steps:
  - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    - task: Bash@3
      displayName: Setup Private Feeds Credentials
      inputs:
        filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
        arguments: $(Build.SourcesDirectory)/NuGet.config $Token
      env:
        Token: $(dn-bot-dnceng-artifact-feeds-rw)

  - download: ${{ parameters.installerBuildResourceId }}
    artifact: BlobArtifacts
    patterns: '**/dotnet-sdk-source*.tar.gz'
    displayName: Download Source Tarball

  - download: ${{ parameters.installerBuildResourceId }}
    artifact: BlobArtifacts
    patterns: '**/dotnet-sdk-!(*-*)-${{ parameters.platform }}-${{ parameters.buildArch }}.tar.gz'
    displayName: Download MSFT sdk Tarball

  - script: |
      set -x

      resourceIdPathSegment=
      if [ '${{ parameters.installerBuildResourceId }}' != 'current' ]; then
        resourceIdPathSegment='${{ parameters.installerBuildResourceId }}/'
      fi

      mkdir -p "${{ parameters.tarballDir }}"
      tarballFilePath="$(PIPELINE.WORKSPACE)/${resourceIdPathSegment}BlobArtifacts/dotnet-sdk-source*.tar.gz"
      eval tar -ozxf "$tarballFilePath" -C "${{ parameters.tarballDir }}"
      eval rm -f "$tarballFilePath"
    displayName: Extract Tarball

  - script: ${{ parameters.prepScript }}
    displayName: Prep Tarball

  - script: |
      set -x
      df -h

      networkArgs=
      customBuildArgs=
      if [ '${{ parameters.runOnline}}' = 'true' ]; then
        customBuildArgs='--online'
      else
        networkArgs='--network none'
      fi

      docker run --rm -v ${{ parameters.tarballDir }}:/tarball -w /tarball ${networkArgs} ${{ parameters.container }} ./build.sh ${customBuildArgs} ${{ parameters.additionalBuildArgs }} -- /p:CleanWhileBuilding=true
    displayName: Build Tarball

  - script: |
      set -x

      # Use installer repo's NuGet.config during online testing to utilize internal feeds
      rm -f ${{ parameters.tarballDir }}/test/Microsoft.DotNet.SourceBuild.SmokeTests/assets/smoke-tests/online.NuGet.Config
      cp $(Build.SourcesDirectory)/NuGet.config ${{ parameters.tarballDir }}/test/Microsoft.DotNet.SourceBuild.SmokeTests/assets/smoke-tests/online.NuGet.Config

      dockerVolumeArgs="-v ${{ parameters.tarballDir }}:/tarball"
      dockerEnvArgs="-e SMOKE_TESTS_EXCLUDE_OMNISHARP=${{ parameters.excludeOmniSharpTests}}"

      if [[ '${{ parameters.isBootstrapped }}' != 'true' && '${{ parameters.installerBuildResourceId }}' != 'current' ]]; then
        dockerVolumeArgs+=" -v $(PIPELINE.WORKSPACE)/${{ parameters.installerBuildResourceId }}/BlobArtifacts/:/BlobArtifacts"
        msftSdkTarballName=$(find "$(PIPELINE.WORKSPACE)/${{ parameters.installerBuildResourceId }}/BlobArtifacts/" -name "dotnet-sdk-*-${{ parameters.Platform }}-${{ parameters.buildArch }}.tar.gz" -exec basename {} \;)
        dockerEnvArgs+=" -e SMOKE_TESTS_MSFT_SDK_TARBALL_PATH=/BlobArtifacts/$msftSdkTarballName"
      fi

      docker run --rm $dockerVolumeArgs -w /tarball $dockerEnvArgs ${{ parameters.container }} ./build.sh --run-smoke-test ${{ parameters.additionalBuildArgs }}
    displayName: Run Tests

  # Don't use CopyFiles@2 as it encounters permissions issues because it indexes all files in the source directory graph.
  - script: |
      set -x

      targetFolder=$(Build.StagingDirectory)/BuildLogs/
      mkdir -p ${targetFolder}

      cd "${{ parameters.tarballDir }}"
      find artifacts/ -type f -name "*.binlog" -exec cp {} --parents -t ${targetFolder} \;
      find artifacts/ -type f -name "*.log" -exec cp {} --parents -t ${targetFolder} \;
      find artifacts/prebuilt-report/ -exec cp {} --parents -t ${targetFolder} \;
      find src/ -type f -name "*.binlog" -exec cp {} --parents -t ${targetFolder} \;
      find src/ -type f -name "*.log" -exec cp {} --parents -t ${targetFolder} \;
      find test/ -type f -name "*.binlog" -exec cp {} --parents -t ${targetFolder} \;
    displayName: Prepare BuildLogs staging directory
    continueOnError: true
    condition: succeededOrFailed()

  - publish: '$(Build.StagingDirectory)/BuildLogs'
    artifact: $(Agent.JobName)_BuildLogs_Attempt$(System.JobAttempt)
    displayName: Publish BuildLogs
    continueOnError: true
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: succeededOrFailed()
    continueOnError: true
    inputs:
      testRunner: vSTest
      testResultsFiles: 'test/**/*.trx'
      searchFolder: ${{ parameters.tarballDir }}
      mergeTestResults: true
      publishRunAttachments: true
      testRunTitle: SourceBuild_SmokeTests_$(Agent.JobName)

  - publish: '${{ parameters.tarballDir }}/artifacts/${{ parameters.buildArch}}/Release/'
    artifact: $(Agent.JobName)_Artifacts
    displayName: Publish Artifacts
    condition: succeededOrFailed()
    continueOnError: true
