# Steps used to build a source-build tarball

parameters:
  # Additional custom build args
  additionalBuildArgs: ""

  # Architecture to build
  buildArch: null

  # Container image to build within
  container: null

  # Script logic to prep the tarball for building
  prepScript: null

  # Whether or not to build online
  runOnline: null

  # Directory to build the tarball in
  tarballDir:

  # Resource id of the tarball to download and build
  tarballResourceId: null

steps:
  - download: ${{ parameters.tarballResourceId }}
    artifact: BlobArtifacts
    patterns: '**/dotnet-sdk-source*.tar.gz'
    displayName: Download Tarball

  - script: |
      set -x

      resourceIdPathSegment=
      if [ '${{ parameters.tarballResourceId }}' != 'current' ]; then
        resourceIdPathSegment='${{ parameters.tarballResourceId }}/'
      fi

      mkdir -p "${{ parameters.tarballDir }}"
      tarballFilePath="$(PIPELINE.WORKSPACE)/${resourceIdPathSegment}BlobArtifacts/dotnet-sdk-source*.tar.gz"
      eval tar -ozxf "$tarballFilePath" -C "${{ parameters.tarballDir }}"
      eval rm -f "$tarballFilePath"
    displayName: Extract Tarball

  - script: ${{ parameters.prepScript }}
    displayName: Prep Tarball

  - script: |
      set -x
      df -h

      networkArgs=
      customBuildArgs=
      if [ '${{ parameters.runOnline}}' = 'true' ]; then
        customBuildArgs='--online'
      else
        networkArgs='--network none'
      fi

      docker run --rm -v ${{ parameters.tarballDir }}:/tarball -w /tarball ${networkArgs} ${{ parameters.container }} ./build.sh ${customBuildArgs} ${{ parameters.additionalBuildArgs }} -- /p:CleanWhileBuilding=true
    displayName: Build Tarball

  - script: |
      set -x

      docker run --rm -v ${{ parameters.tarballDir }}:/tarball -w /tarball ${{ parameters.container }} ./build.sh --run-smoke-test ${{ parameters.additionalBuildArgs }}
    displayName: Run Tests

  - task: CopyFiles@2
    displayName: Prepare BuildLogs staging directory
    inputs:
      SourceFolder: '${{ parameters.tarballDir }}'
      Contents: |
        artifacts/**/*.binlog
        artifacts/**/*.log
        artifacts/prebuilt-report/*
        src/**/*.binlog
        src/**/*.log
      TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
      CleanTargetFolder: true
    continueOnError: true
    condition: succeededOrFailed()

  # Smoke tests set the HOME dir to a testing-smoke subdir which cause permissions issue with CopyFiles@2 on some distros.
  # Manually copy the specific logs directory to workaround this.
  - script: |
      set -x

      mkdir -p $(Build.StagingDirectory)/BuildLogs/testing-smoke
      cp -rf testing-smoke/logs $(Build.StagingDirectory)/BuildLogs/testing-smoke
    displayName: Gather Smoke Test Logs
    continueOnError: true
    condition: succeededOrFailed()

  - publish: '$(Build.StagingDirectory)/BuildLogs'
    artifact: $(Agent.JobName)_BuildLogs_Attempt$(System.JobAttempt)
    displayName: Publish BuildLogs
    continueOnError: true
    condition: succeededOrFailed()

  - publish: '${{ parameters.tarballDir }}/artifacts/${{ parameters.buildArch}}/Release/'
    artifact: $(Agent.JobName)_Artifacts
    displayName: Publish Artifacts
