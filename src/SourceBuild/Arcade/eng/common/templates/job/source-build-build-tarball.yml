# Builds a source-build tarball

parameters:
  # Architecture to build
  architecture:

  # Custom condition to apply to the job
  condition:

  # Dependent jobs that must be completed before this job will run
  dependsOn:

  # Skip running the SDK content smoke-tests
  excludeSdkContentTests: false

  # Resource id of the installer build to retrieve source/product tarball's from
  installerBuildResourceId:

  # Matrix to run jobs over
  matrix:

  # Job name
  name:

  # Agent pool to use
  pool:

  # Build using the previous source-build artifacts
  usePreviousArtifacts: false

jobs:
- job: ${{ parameters.name }}
  condition: ${{ parameters.condition }}
  dependsOn: ${{ parameters.dependsOn }}
  pool: ${{ parameters.pool }}
  strategy:
    matrix: ${{ parameters.matrix }}
  timeoutInMinutes: 300
  variables:
  - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    - group: AzureDevOps-Artifact-Feeds-Pats
  - ${{ if eq(parameters.usePreviousArtifacts, 'true') }}:
    - name: additionalBuildArgs
      value: --with-sdk /tarball/.dotnet
  - name: tarballDir
    ${{ if eq(parameters.installerBuildResourceId, '') }}:
      value: $(Build.SourcesDirectory)
    ${{ else }}:
      value: $(Build.StagingDirectory)/tarball
  - name: installerSrcDir
    ${{ if eq(parameters.installerBuildResourceId, '') }}:
      value: $(Build.SourcesDirectory)/src/installer
    ${{ else }}:
      value: $(Build.SourcesDirectory)
  workspace:
    clean: all

  steps:
  - checkout: self
    clean: true

  - ${{ if ne(parameters.installerBuildResourceId, '') }}:
    - download: ${{ parameters.installerBuildResourceId }}
      artifact: BlobArtifacts
      patterns: '**/dotnet-sdk-source*.tar.gz'
      displayName: Download Source Tarball

    - script: |
        set -x

        resourceIdPathSegment=
        if [[ '${{ parameters.installerBuildResourceId }}' != 'current' ]]; then
          resourceIdPathSegment='${{ parameters.installerBuildResourceId }}/'
        fi

        mkdir -p "$(tarballDir)"
        tarballFilePath="$(PIPELINE.WORKSPACE)/${resourceIdPathSegment}BlobArtifacts/dotnet-sdk-source*.tar.gz"
        eval tar -ozxf "$tarballFilePath" -C "$(tarballDir)"
        eval rm -f "$tarballFilePath"
      displayName: Extract Tarball

  - script: cp $(installerSrcDir)/NuGet.config $(tarballDir)/test/Microsoft.DotNet.SourceBuild.SmokeTests/assets/online.NuGet.Config
    displayName: Copy Test NuGet Config

  - ${{ if ne(parameters.excludeSdkContentTests, 'true') }}:
    - download: ${{ parameters.installerBuildResourceId }}
      artifact: BlobArtifacts
      patterns: '**/dotnet-sdk-+([0-9]).+([0-9]).+([0-9])?(-@(preview|rc|rtm)*)-linux*-${{ parameters.architecture }}.tar.gz'
      displayName: Download MSFT sdk Tarball

  - ${{ if eq(parameters.usePreviousArtifacts, 'true') }}:
    - download: current
      artifact: $(_PreviousSourceBuildArtifact)
      patterns: '*.tar.gz'
      displayName: Download Previous Source Build Artifacts

    - task: CopyFiles@2
      displayName: Copy Previous Source Build Artifacts
      inputs:
        SourceFolder: $(PIPELINE.WORKSPACE)/$(_PreviousSourceBuildArtifact)
        Contents: '*.tar.gz'
        TargetFolder: $(tarballDir)/packages/archive/

  - script: |
      set -x

      if [[ '${{ parameters.usePreviousArtifacts }}' != 'true' ]]; then
        customPrepArgs=
        if [[ '$(_BootstrapPrep)' == 'true' ]]; then
          customPrepArgs='--bootstrap'
        fi

        docker run --rm -v $(tarballDir):/tarball -w /tarball $(_Container) ./prep.sh  ${customPrepArgs}
      else
        mkdir $(tarballDir)/.dotnet
        tarballFilePath="$(tarballDir)/packages/archive/dotnet-sdk-*.tar.gz"
        eval tar -ozxf "$tarballFilePath" -C "$(tarballDir)/.dotnet"
        eval rm -f "$tarballFilePath"
      fi
    displayName: Prep Tarball

  - script: |
      set -x
      df -h

      customRunArgs=
      customBuildArgs=
      if [[ '$(_RunOnline)' == 'true' ]]; then
        customBuildArgs='--online'
      else
        customRunArgs='--network none'
      fi

      # See https://github.com/dotnet/source-build/issues/3712
      if [[ '$(_OverrideDistroDisablingSha1)' == 'true' ]]; then
        customRunArgs="$customRunArgs -e OPENSSL_ENABLE_SHA1_SIGNATURES=1"
      fi

      if [[ '$(_EnablePoison)' == 'true' ]]; then
        customBuildArgs="$customBuildArgs --poison"
      fi

      docker run --rm -v $(tarballDir):/tarball -w /tarball ${customRunArgs} $(_Container) ./build.sh --clean-while-building ${customBuildArgs} $(additionalBuildArgs)
    displayName: Build Tarball

  - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    - task: Bash@3
      displayName: Setup Private Feeds Credentials
      inputs:
        filePath: $(installerSrcDir)/eng/common/SetupNugetSources.sh
        arguments: $(tarballDir)/test/Microsoft.DotNet.SourceBuild.SmokeTests/assets/online.NuGet.Config $Token
      env:
        Token: $(dn-bot-dnceng-artifact-feeds-rw)

  - script: |
      set -x

      dockerVolumeArgs="-v $(tarballDir):/tarball"
      dockerEnvArgs="-e SMOKE_TESTS_EXCLUDE_OMNISHARP=$(_ExcludeOmniSharpTests) -e SMOKE_TESTS_WARN_SDK_CONTENT_DIFFS=true"
      poisonArg=''

      if [[ '${{ parameters.excludeSdkContentTests}}' != 'true' ]]; then
        dockerVolumeArgs+=" -v $(PIPELINE.WORKSPACE)/${{ parameters.installerBuildResourceId }}/BlobArtifacts/:/BlobArtifacts"
        platform="linux"
        docker run --rm $(_Container) /bin/sh -c "cat /etc/os-release | grep -q alpine"
        if [[ $? == 0 ]]; then
          platform="$platform-musl"
        fi
        msftSdkTarballName=$(find "$(PIPELINE.WORKSPACE)/${{ parameters.installerBuildResourceId }}/BlobArtifacts/" -name "dotnet-sdk-*-$platform-${{ parameters.architecture }}.tar.gz" -exec basename {} \;)
        dockerEnvArgs+=" -e SMOKE_TESTS_MSFT_SDK_TARBALL_PATH=/BlobArtifacts/$msftSdkTarballName"
      fi

      if [[ '$(_EnablePoison)' == 'true' ]]; then
        poisonArg='--poison'
        dockerEnvArgs+=" -e SMOKE_TESTS_WARN_POISON_DIFFS=true"
      fi

      docker run --rm $dockerVolumeArgs -w /tarball $dockerEnvArgs $(_Container) ./build.sh $poisonArg --run-smoke-test $(additionalBuildArgs) -- /p:SmokeTestConsoleVerbosity=detailed
    displayName: Run Tests

  # Don't use CopyFiles@2 as it encounters permissions issues because it indexes all files in the source directory graph.
  - script: |
      set -x

      targetFolder=$(Build.StagingDirectory)/BuildLogs/
      mkdir -p ${targetFolder}

      cd "$(tarballDir)"
      find artifacts/ -type f -name "*.binlog" -exec cp {} --parents -t ${targetFolder} \;
      find artifacts/ -type f -name "*.log" -exec cp {} --parents -t ${targetFolder} \;
      find artifacts/prebuilt-report/ -exec cp {} --parents -t ${targetFolder} \;
      find src/ -type f -name "*.binlog" -exec cp {} --parents -t ${targetFolder} \;
      find src/ -type f -name "*.log" -exec cp {} --parents -t ${targetFolder} \;
      find test/ -type f -name "*.binlog" -exec cp {} --parents -t ${targetFolder} \;
      find test/ -type f -name "Updated*.diff" -exec cp {} --parents -t ${targetFolder} \;
      find test/ -type f -name "Updated*.txt" -exec cp {} --parents -t ${targetFolder} \;
    displayName: Prepare BuildLogs staging directory
    continueOnError: true
    condition: succeededOrFailed()

  - publish: '$(Build.StagingDirectory)/BuildLogs'
    artifact: $(Agent.JobName)_BuildLogs_Attempt$(System.JobAttempt)
    displayName: Publish BuildLogs
    continueOnError: true
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: succeededOrFailed()
    continueOnError: true
    inputs:
      testRunner: vSTest
      testResultsFiles: 'test/**/*.trx'
      searchFolder: $(tarballDir)
      mergeTestResults: true
      publishRunAttachments: true
      testRunTitle: SourceBuild_SmokeTests_$(Agent.JobName)

  - publish: '$(tarballDir)/artifacts/${{ parameters.architecture}}/Release/'
    artifact: $(Agent.JobName)_Artifacts
    displayName: Publish Artifacts
    condition: succeededOrFailed()
    continueOnError: true
