<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OverrideTargetRid>$(TargetRid)</OverrideTargetRid>
    <OverrideTargetRid Condition="'$(TargetOS)' == 'osx'">osx-$(TargetArchitecture)</OverrideTargetRid>
    <OverrideTargetRid Condition="'$(TargetOS)' == 'freebsd'">freebsd-$(TargetArchitecture)</OverrideTargetRid>
    <OverrideTargetRid Condition="'$(TargetOS)' == 'windows'">win-$(TargetArchitecture)</OverrideTargetRid>
    <OSNameOverride>$(OverrideTargetRid.Substring(0, $(OverrideTargetRid.IndexOf("-"))))</OSNameOverride>

    <!-- Determine target portable rid based on bootstrap SDK's portable rid -->
    <_platformIndex>$(NETCoreSdkPortableRuntimeIdentifier.LastIndexOf('-'))</_platformIndex>
    <PortableOS>$(NETCoreSdkPortableRuntimeIdentifier.Substring(0, $(_platformIndex)))</PortableOS>

    <!-- Use the repo root build script -->
    <BuildScript>$(ProjectDirectory)build$(ShellExtension)</BuildScript>

    <!-- Restore and Build actions are already passed in by the root script. -->
    <BuildActions>$(FlagParameterPrefix)pack $(FlagParameterPrefix)publish</BuildActions>

    <BuildArgs>$(BuildArgs) $(FlagParameterPrefix)runtime-id $(OverrideTargetRid)</BuildArgs>

    <!--
      Setting NETCoreAppMaximumVersion to a high version so that the sdk doesn't complain if we're restoring/publishing for a higher version than the sdk.
      See https://github.com/dotnet/sdk/issues/1512#issuecomment-377082883
    -->
    <BuildArgs>$(BuildArgs) /p:NETCoreAppMaximumVersion=99.9</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:OSName=$(OSNameOverride)</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:PortableOSName=$(PortableOS)</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:Rid=$(OverrideTargetRid)</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:DOTNET_INSTALL_DIR=$(DotNetRoot)</BuildArgs>

    <BuildArgs Condition="'$(TargetOS)' != 'windows'">$(BuildArgs) /p:AspNetCoreInstallerRid=$(OverrideTargetRid)</BuildArgs>
    <!-- core-sdk always wants to build portable on OSX and FreeBSD -->
    <BuildArgs Condition="'$(TargetOS)' == 'freebsd'">$(BuildArgs) /p:PortableBuild=true</BuildArgs>
    <BuildArgs Condition="'$(TargetOS)' != 'windows'">$(BuildArgs) /p:CoreSetupRid=$(OverrideTargetRid)</BuildArgs>

    <!-- Consume the source-built Core-Setup and toolset. This line must be removed to source-build CLI without source-building Core-Setup first. -->
    <BuildArgs>$(BuildArgs) /p:PublicBaseURL=file:%2F%2F$(SourceBuiltAssetsDir)</BuildArgs>

    <BuildArgs>$(BuildArgs) /p:UsePortableLinuxSharedFramework=false</BuildArgs>
  </PropertyGroup>

  <ItemGroup>
    <RepositoryReference Include="arcade" />
    <RepositoryReference Include="aspnetcore" />
    <RepositoryReference Include="emsdk" />
    <RepositoryReference Include="fsharp" />
    <RepositoryReference Include="msbuild" />
    <RepositoryReference Include="source-build-externals" Condition="'$(DotNetBuildFromSource)' == 'true'" />
    <RepositoryReference Include="nuget-client" />
    <RepositoryReference Include="roslyn" />
    <RepositoryReference Include="runtime" />
    <RepositoryReference Include="sdk" />
    <RepositoryReference Include="test-templates" />
    <RepositoryReference Include="vstest" />
  </ItemGroup>

  <!--
    If we have authentication, keep the templating internal feed (if one exists) to acquire the
    text-only prebuilt. The source-build repo as a whole should depend on the same internal feed as
    this repo does, so authentication should already be set up in the global endpoints json.
  -->
  <ItemGroup Condition="'$(VSS_NUGET_EXTERNAL_FEED_ENDPOINTS)' != ''">
    <KeepFeedPrefixes Include="darc-int-dotnet-aspnetcore-" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="CLIBUILD_SKIP_TESTS=true" />

    <!-- Disable bundled tools until we can figure out:
      Unable to find package dotnet-dev-certs.
      Unable to find package dotnet-ef.
      Unable to find package dotnet-sql-cache.
      Unable to find package dotnet-user-secrets.
      Unable to find package dotnet-user-jwts.
      Unable to find package dotnet-watch.  -->
    <EnvironmentVariables Include="CLIBUILD_SKIP_BUNDLEDDOTNETTOOLS=true" />
  </ItemGroup>

</Project>
