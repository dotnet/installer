<Project Sdk="Microsoft.Build.NoTargets" TreatAsLocalProperty="CleanWhileBuilding">

  <ItemGroup>
    <RepositoryReference Include="arcade" />
    <RepositoryReference Include="command-line-api" />
  </ItemGroup>

  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' == 'true'">
    <RepositoryReference Include="source-build-externals" />
    <RepositoryReference Include="source-build-reference-packages" />
  </ItemGroup>

  <PropertyGroup>
    <!-- The scenario-tests repo shouldn't be cleaned after building as we run tests from it. -->
    <CleanWhileBuilding>false</CleanWhileBuilding>

    <ScenarioTestsArtifactsDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'scenario-tests'))</ScenarioTestsArtifactsDir>
    <ScenarioTestsResultsDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsTestResultsDir)', 'scenario-tests'))</ScenarioTestsResultsDir>
    <_ScenarioTestsNuGetConfig>$(ScenarioTestsArtifactsDir)NuGet.config</_ScenarioTestsNuGetConfig>
    <_InstallerNuGetConfig>$(RepoRoot)src/installer/NuGet.config</_InstallerNuGetConfig>
  </PropertyGroup>

  <Target Name="SetupNuGetConfig"
          Inputs="$(_InstallerNuGetConfig)"
          Outputs="$(_ScenarioTestsNuGetConfig)">

    <Copy SourceFiles="$(_InstallerNuGetConfig)"
          DestinationFiles="$(_ScenarioTestsNuGetConfig)" />

    <AddSourceToNuGetConfig Condition="'$(DotNetBuildSourceOnly)' != 'true'"
                            NuGetConfigFile="$(_ScenarioTestsNuGetConfig)"
                            SourceName="local-feed"
                            SourcePath="$(ConsolidatedLocalFeedDir)" />
  </Target>

  <Target Name="RunScenarioTests"
          DependsOnTargets="SetupNuGetConfig;DetermineSourceBuiltSdkVersion">

    <PropertyGroup>
      <_CurrentDateTime>$([System.DateTime]::Now.ToString("yyyy-MM-dd_HH_mm_ss"))</_CurrentDateTime>
      <_TestXmlOutputPath>$(ScenarioTestsResultsDir)$(_CurrentDateTime).xml</_TestXmlOutputPath>
      <_ScenarioTestsAdditionalTestArgs>--xml $(_TestXmlOutputPath) --target-rid $(TargetRid) --no-cleanup --no-traits Category=MultiTFM</_ScenarioTestsAdditionalTestArgs>

      <!-- Define the test root as a sub-directory of the scenario test artifacts directory. It needs to be a sub-directory because the scenario test execution
           will clean that directory. Since we need the NuGet.config file that we copied in to be preserved, that's stored in the directory above the test root. -->
      <_TestRoot>$(ScenarioTestsArtifactsDir)artifacts/</_TestRoot>

      <!-- It's necessary to explicitly define the path to the dotnet tool to prevent Arcade from attempting to derive it. Otherwise, it will run the dotnet
           install script to get a new one. We must use the locally built SDK instead in order to support non-portable RIDs for source build. -->
      <_DotNetTool Condition="'$(BuildOS)' == 'windows'">$(DotNetSdkExtractDir)dotnet.exe</_DotNetTool>
      <_DotNetTool Condition="'$(BuildOS)' != 'windows'">$(DotNetSdkExtractDir)dotnet</_DotNetTool>
    </PropertyGroup>

    <Exec Command="$(_DotNetTool) --list-runtimes"
          ConsoleToMsBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="_Runtimes" />
    </Exec>

    <PropertyGroup>
      <_RuntimeVersion>$([System.Text.RegularExpressions.Regex]::Match($(_Runtimes), 'Microsoft\.NETCore\.App\s+(.*)\s+\[').Groups[1].Value)</_RuntimeVersion>

      <!-- This is necessary to account for the DevVersions UB VMR leg which builds the product with an unofficial build version (e.g. 9.0.0-ci).
           Since the scenario tests DLL was built with an official version, the built dotnet CLI with the unofficial runtime version isn't capable
           of running the scenario tests DLL because the unofficial runtime version is treated as being older. So roll-forward doesn't help with this
           either. Instead, we call dotnet by explicitly setting the runtime framework version. This forces the host to not look for the runtime version
           used by the scenario tests DLL. -->
      <_ScenarioTestsAdditionalDotNetArgs>--fx-version $(_RuntimeVersion)</_ScenarioTestsAdditionalDotNetArgs>
    </PropertyGroup>

    <MakeDir Directories="$(ScenarioTestsResultsDir)" />

    <ItemGroup>
      <_ScenarioTestEnvVars Include="
        TestRoot=$(_TestRoot);
        DotNetRoot=$(DotNetSdkExtractDir);
        TestSdkVersion=$(SourceBuiltSdkVersion);
        AdditionalDotNetArgs=$(_ScenarioTestsAdditionalDotNetArgs);
        AdditionalTestArgs=$(_ScenarioTestsAdditionalTestArgs);
        DotNetTool=$(_DotNetTool);
        _InitializeDotNetCli=$(DotNetSdkExtractDir)" />
    </ItemGroup>

    <Exec Command="$(TestCommand)"
          WorkingDirectory="$(ProjectDirectory)"
          EnvironmentVariables="@(_ScenarioTestEnvVars)" />
  </Target>

</Project>
