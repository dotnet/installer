<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(NetCurrent)</TargetFramework>
    <Nullable>enable</Nullable>
    <!-- Set manually as the project name doesn't follow the Arcade conventions. -->
    <IsTestProject>true</IsTestProject>
    <DefaultExcludesInProjectFolder>$(DefaultExcludesInProjectFolder);assets/**/*</DefaultExcludesInProjectFolder>
    <!-- Multiple loggers are specified so that results are captured in trx and pipelines can fail with AzDO pipeline warnings
         Workaround https://github.com/dotnet/source-build/issues/4003 by disabling VSTestUseMSBuildOutput -->
    <VSTestUseMSBuildOutput>false</VSTestUseMSBuildOutput>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.FileSystemGlobbing" />
    <PackageReference Include="Newtonsoft.Json" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="assets/**"
             CopyToOutputDirectory="Always" />
  </ItemGroup>

  <Target Name="SetRuntimeConfigOptions"
          DependsOnTargets="DetermineSourceBuiltSdkVersion"
          BeforeTargets="_GenerateRuntimeConfigurationFilesInputCache">
    <ItemGroup>
      <SourceBuiltArtifactsItem Include="$(ArtifactsAssetsDir)$(SourceBuiltArtifactsTarballName).*$(ArchiveExtension)" />
    </ItemGroup>

    <PropertyGroup>
      <SourceBuiltArtifactsPath>%(SourceBuiltArtifactsItem.Identity)</SourceBuiltArtifactsPath>
    </PropertyGroup>

    <ItemGroup>
      <!-- Required values -->
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.DotNetDirectory">
        <Value>$(TargetDir)extracted-sdk</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.TargetRid">
        <Value>$(TargetRid)</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.PortableRid">
        <Value>$(PortableRid)</Value>
      </RuntimeHostConfigurationOption>

      <!-- Optional values -->
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.CustomPackagesPath">
        <Value>$(SmokeTestsCustomSourceBuiltPackagesPath)</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.ExcludeOmniSharpTests">
        <Value>$(SmokeTestsExcludeOmniSharpTests)</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.IncludeArtifactsSizeTests">
        <Value>$(SmokeTestsIncludeArtifactsSizeTests)</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.MsftSdkTarballPath">
        <Value>$(MsftSdkTarballPath)</Value>
      </RuntimeHostConfigurationOption>      
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.PoisonReportPath"
                                      Condition="'$(EnablePoison)' == 'true' and Exists('$(PoisonUsageReportFile)')">
        <Value>$(PoisonUsageReportFile)</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.PrereqsPath">
        <Value>$(SmokeTestsPrereqsPath)</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.SdkTarballPath">
        <Value>$(SdkTarballPath)</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.SourceBuiltArtifactsPath">
        <Value>$(SourceBuiltArtifactsPath)</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.WarnOnLicenseScanDiffs">
        <Value>$(SmokeTestsWarnOnLicenseScanDiffs)</Value>
      </RuntimeHostConfigurationOption>
      <RuntimeHostConfigurationOption Include="Microsoft.DotNet.SourceBuild.SmokeTests.WarnOnSdkContentDiffs">
        <Value>$(SmokeTestsWarnOnSdkContentDiffs)</Value>
      </RuntimeHostConfigurationOption>
    </ItemGroup>
  </Target>

  <Target Name="CheckIfCreateSmokeTestPrereqsExistToPack"
          DependsOnTargets="DetermineSourceBuiltSdkVersion">
    <PropertyGroup>
      <!-- NuGet package cache directory -->
      <SmokeTestsPackagesDir>$(TargetDir)packages/</SmokeTestsPackagesDir>
      <SmokeTestPrereqsArchive>$(ArtifactsAssetsDir)dotnet-smoke-test-prereqs.$(SourceBuiltSdkVersion).$(TargetRid)$(ArchiveExtension)</SmokeTestPrereqsArchive>
    </PropertyGroup>

    <ItemGroup>
      <SmokeTestsPrereq Include="$(SmokeTestsPackagesDir)**/*.nupkg" />
    </ItemGroup>
  </Target>

  <!-- The target is automatically skipped when @(SmokeTestsPrereq) is empty. -->
  <Target Name="CreateSmokeTestPrereqsArchiveIfPrereqsExist"
          Condition="'$(SkipSmokeTestPrereqsArchiveCreation)' != 'true'"
          DependsOnTargets="CheckIfCreateSmokeTestPrereqsExistToPack"
          AfterTargets="Test"
          Inputs="@(SmokeTestsPrereq)"
          Outputs="$(SmokeTestPrereqsArchive)">
    <Message Text="Found @(SmokeTestsPrereq->Count()) prereqs in '$(SmokeTestsPackagesDir)'." Importance="High" />

    <PropertyGroup>
      <SmokeTestsIntermediatePrereqPackagesDir>$(IntermediateOutputPath)prereq-packages/</SmokeTestsIntermediatePrereqPackagesDir>
    </PropertyGroup>

    <Copy SourceFiles="@(SmokeTestsPrereq)"
          DestinationFolder="$(SmokeTestsIntermediatePrereqPackagesDir)"
          SkipUnchangedFiles="true" />

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(SmokeTestPrereqsArchive)'))" />
    <Exec Command="tar --numeric-owner -czf $(SmokeTestPrereqsArchive) ."
          WorkingDirectory="$(SmokeTestsIntermediatePrereqPackagesDir)" />

    <Message Importance="High" Text="Packaged smoke-test prereqs in '$(SmokeTestPrereqsArchive)'" />
  </Target>

</Project>
