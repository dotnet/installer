<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>
  <PropertyGroup>
    <ArtifactsDir>$(RepoRoot)artifacts/</ArtifactsDir>
    <VirtualMonoRepoTasksAssembly>$(ArtifactsDir)bin/VirtualMonoRepo.Tasks/$(Configuration)/net6.0/VirtualMonoRepo.Tasks.dll</VirtualMonoRepoTasksAssembly>

    <VmrDir Condition=" '$(VmrDir)' == '' ">$(ArtifactsDir)vmr/</VmrDir>
    <VmrDir>$([MSBuild]::EnsureTrailingSlash('$(VmrDir)'))</VmrDir>
    <TmpDir Condition=" '$(TmpDir)' == '' ">$(RepoRoot)tmp/</TmpDir>

    <!-- We set this for the source build targets to work well -->
    <TarballDir>$(VmrDir)</TarballDir>
    <InitializeVMR>true</InitializeVMR>
  </PropertyGroup>

  <Import Project="../SourceBuild/Arcade/tools/SourceBuildArcadeTarball.targets" />

  <PropertyGroup>
    <VmrGitInfoDir>$(TarballGitInfoDir)</VmrGitInfoDir>
  </PropertyGroup>

  <UsingTask TaskName="Microsoft.DotNet.VirtualMonoRepo.Tasks.VirtualMonoRepo_Initialize" AssemblyFile="$(VirtualMonoRepoTasksAssembly)" />

  <Target Name="Build" DependsOnTargets="InitializeVMR" />

  <Target Name="InitializeVMR" DependsOnTargets="GenerateFullNuGetVersion;
                                                 GenerateVersionFile;
                                                 InitializeCleanVmr;
                                                 CopyTarballContent;
                                                 CommitInitialContent;
                                                 SetupSelfGithubInfo;
                                                 InitializeRepoAndDependentsRecursive">
    <Message Text="VMR was successfully initialized in '$(VmrDir)'" Importance="High" />
  </Target>

  <Target Name="InitializeCleanVmr">
    <Error Text="VmrDir not specified" Condition=" '$(VmrDir)' == '' " />

    <RemoveDir Directories='$(VmrDir)' Condition=" EXISTS('$(VmrDir)') " />
    <MakeDir Directories="$(VmrDir)" />
    <MakeDir Directories="$(VmrGitInfoDir)" Condition=" '$(VmrGitInfoDir)' != '' " />
    <MakeDir Directories="$(TmpDir)" Condition=" !EXISTS('$(TmpDir)') " />

    <Exec Command="git -C '$(VmrDir)' init -b main" />
  </Target>

  <Target Name="CommitInitialContent">
    <Exec Command="git -C '$(VmrDir)' add -A" />
    <Exec Command="git -C '$(VmrDir)' commit -m 'VMR initialized'" />
  </Target>

  <Target Name="InitializeRepoAndDependentsRecursive"
    DependsOnTargets="GetSourceBuildIntermediateNupkgNameConvention">

    <Message Text="--> Initializing repo $(SourceBuildRepoName)" Importance="High" />
    <PropertyGroup>
      <SourceDir>$(SourceBuildRepoName)/</SourceDir>
      <TarballRepoSourceDir>$(TarballSourceDir)$(SourceDir)</TarballRepoSourceDir>
      <TarballRepoSourceEngDir>$(TarballSourceDir)$(SourceDir)eng/</TarballRepoSourceEngDir>
      <TarballVersionDetailsFile>$(TarballRepoSourceEngDir)Version.Details.xml</TarballVersionDetailsFile>
    </PropertyGroup>

    <VirtualMonoRepo_Initialize
      Repository="$(SourceBuildRepoName)"
      Revision="$(RepoSha)"
      VmrPath="$(VmrDir)"
      TmpPath="$(TmpDir)" />

    <Message Text="--> Done initializing repo $(SourceBuildRepoName)" Importance="High" />

    <Tarball_ReadSourceBuildIntermediateNupkgDependencies
      VersionDetailsXmlFile="$([MSBuild]::NormalizePath($(TarballVersionDetailsFile)))"
      SourceBuildIntermediateNupkgPrefix="$(SourceBuildIntermediateNupkgPrefix)"
      SourceBuildIntermediateNupkgRid="$(SourceBuildIntermediateNupkgRid)"
      ConvertInternalRepos="$(ConvertInternalRepos)">
      <Output TaskParameter="Dependencies" ItemName="SourceBuildRepos" />
    </Tarball_ReadSourceBuildIntermediateNupkgDependencies>

    <!-- Remove repo if it has already be cloned at any sha.  This results in
         The commit sha for the cloned repo in the tarball being the one that
         was first encountered. -->
    <ItemGroup>
      <SourceBuildRepos Remove="@(SourceBuildRepos)" Condition=" EXISTS('$(TarballGitInfoDir)%(SourceBuildRepoName).props')" />
    </ItemGroup>

    <Tarball_WriteSourceRepoProperties
      SourceBuildMetadataDir="$(TarballGitInfoDir)"
      Dependencies="@(SourceBuildRepos)" />

    <Message Text="--> Dependencies for $(TarballVersionDetailsFile):" Importance="High" />
    <Message Text="-->     %(SourceBuildRepos.SourceBuildRepoName) / %(SourceBuildRepos.Sha)" Importance="High" />
    <MSBuild Projects="$(MSBuildProjectFile)"
      Condition=" '@(SourceBuildRepos)' != '' "
      Targets="InitializeRepoAndDependentsRecursive"
      Properties="SourceBuildRepoName=%(SourceBuildRepos.SourceBuildRepoName);RepoSha=%(SourceBuildRepos.Sha)" />

  </Target>

</Project>
