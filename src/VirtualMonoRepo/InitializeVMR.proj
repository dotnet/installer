<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>
  <PropertyGroup>
    <ArtifactsDir>$(RepoRoot)artifacts/</ArtifactsDir>
    <VirtualMonoRepoTasksAssembly>$(ArtifactsDir)bin/VirtualMonoRepo.Tasks/$(Configuration)/net7.0/VirtualMonoRepo.Tasks.dll</VirtualMonoRepoTasksAssembly>

    <VmrDir Condition=" '$(VmrDir)' != '' ">$([MSBuild]::EnsureTrailingSlash('$(VmrDir)'))</VmrDir>
    <TmpDir Condition=" '$(TmpDir)' == '' ">$(ArtifactsDir)tmp/</TmpDir>
    <VmrDefaultBranch Condition=" '$(VmrDefaultBranch)' == '' ">main</VmrDefaultBranch>

    <!-- We set this for the source build targets to work well -->
    <TarballDir>$(VmrDir)</TarballDir>
    <InitializeVMR>true</InitializeVMR>
  </PropertyGroup>

  <Import Project="../SourceBuild/Arcade/tools/SourceBuildArcadeTarball.targets" />

  <!-- Pull back in some properties from the tarball defaults -->
  <PropertyGroup>
    <VmrGitInfoDir>$(TarballGitInfoDir)</VmrGitInfoDir>
    <VmrSourceDir>$(TarballSourceDir)</VmrSourceDir>
  </PropertyGroup>

  <UsingTask TaskName="Microsoft.DotNet.VirtualMonoRepo.Tasks.VirtualMonoRepo_Initialize" AssemblyFile="$(VirtualMonoRepoTasksAssembly)" />

  <Target Name="Build" DependsOnTargets="InitializeVMR" />

  <!--
    This target initializes a fresh VMR from scratch by assembling it similarly to the tarball.
    Instead of cloning the repositories, we pull the sources via the `darc vmr initialize` command.
    Most of the targets are reused from the tarball generation process (SourceBuildArcadeTarball.targets).
  -->
  <Target Name="InitializeVMR" DependsOnTargets="GenerateFullNuGetVersion;
                                                 GenerateVersionFile;
                                                 InitializeCleanVmr;
                                                 CopyTarballContent;
                                                 CommitInitialContent;
                                                 InitializeRepoAndDependentsRecursive;
                                                 CopyTextOnlyPackages;
                                                 CommitTextOnlyPackages">
    <Message Text="VMR was successfully initialized in '$(VmrDir)'" Importance="High" />
  </Target>

  <Target Name="InitializeCleanVmr">
    <RemoveDir Directories='$(VmrDir)' Condition=" EXISTS('$(VmrDir)') " />
    <MakeDir Directories="$(VmrDir)" />
    <MakeDir Directories="$(VmrGitInfoDir)" Condition=" '$(VmrGitInfoDir)' != '' " />
    <MakeDir Directories="$(TmpDir)" Condition=" !EXISTS('$(TmpDir)') " />

    <Exec Command="git init -b $(VmrDefaultBranch)" WorkingDirectory="$(VmrDir)" />
  </Target>

  <Target Name="CommitInitialContent">
    <Exec Command="git add -A" WorkingDirectory="$(VmrDir)" />
    <Exec Command="git commit -m '[Initialization] Initial commit%0D%0A%0D%0A[[ commit created by automation ]]'" WorkingDirectory="$(VmrDir)" />
  </Target>

  <Target Name="InitializeRepoAndDependentsRecursive"
    DependsOnTargets="GetSourceBuildIntermediateNupkgNameConvention">

    <PropertyGroup>
      <RootRepoName>$([System.IO.Path]::GetFileName("$(RepoRoot.TrimEnd('/').TrimEnd('\\'))"))</RootRepoName>
    </PropertyGroup>

    <!-- Get installer's sha -->
    <Exec Command="git rev-parse HEAD" ConsoleToMSBuild="true" WorkingDirectory="$(RepoRoot)">
      <Output TaskParameter="ConsoleOutput" ItemName="RootRepoCommitSha" />
    </Exec>

    <Message Text="--> Initializing individual repos recursively. Starting from $(RootRepoName) / @(RootRepoCommitSha)" Importance="High" />

    <!-- We are hardcoding the package version for the root repo (installer), since there
         isn't a Version.Details.xml file to read it from.
         See https://github.com/dotnet/source-build/issues/2250 -->
    <VirtualMonoRepo_Initialize
      Repository="$(RootRepoName)"
      Revision="@(RootRepoCommitSha)"
      PackageVersion="8.0.100"
      Recursive="true"
      VmrPath="$(VmrDir)"
      TmpPath="$(TmpDir)" />

    <Message Text=" -> Done initializing individual repositories recursively" Importance="High" />

  </Target>

  <Target Name="CommitTextOnlyPackages">
    <Exec Command="git add packages/text-only" WorkingDirectory="$(VmrDir)" />
    <Exec Command="git commit -m '[Initialization] Initialized text-only packages%0D%0A%0D%0A[[ commit created by automation ]]'" WorkingDirectory="$(VmrDir)" />
  </Target>

</Project>
